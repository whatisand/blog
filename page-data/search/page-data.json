{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"문제를 먼저 발견하는 사람이 있을 수 있고, 지금 회사가 가진 솔루션보다 더 효과적인 방법이 떠오른 사람이 있을 수 있다. 항상 모두가 홈런을 치지는 않는다.\n모두가 스윙을 할 수 있도록 판을 깔아주어야 한다.\n중요하다고 생각한 사람은 shy하다. 그 사람이 나설 수 있도록 문화를 만들어 주어야 한다.\n내가 생각한 아이디어를 말하고 실천해볼 수 있도록 만…","fields":{"slug":"/중요하다고-생각하는-사람이-행동하기/"},"frontmatter":{"date":"October 29, 2022","title":"중요하다고 생각하는 사람이 행동하기","tags":["생각","조직","심리적안정감"]},"rawMarkdownBody":"\n> 문제를 먼저 발견하는 사람이 있을 수 있고, 지금 회사가 가진 솔루션보다 더 효과적인 방법이 떠오른 사람이 있을 수 있다. 항상 모두가 홈런을 치지는 않는다.\n> 모두가 스윙을 할 수 있도록 판을 깔아주어야 한다.\n> 중요하다고 생각한 사람은 shy하다. 그 사람이 나설 수 있도록 문화를 만들어 주어야 한다.\n> 내가 생각한 아이디어를 말하고 실천해볼 수 있도록 만들어 주는 것 역시 심리적 안정감이다.\n\n"},{"excerpt":"아무리 공부를 많이 했다고 해도 실무 경력은 무시할 수 없다.\n공부 상황과는 다르게 실무에서는 \"해야만 하는 것\"이 수없이 많이 발생한다. 공부할때는 안전한 환경에서 넘어갔을 일도 실무에서는 이슈로 다가올 때가 많다.\n여기에서 가장 밀도있는 경험 가능하다.\n하지만 이 경험은 역량의 성장과는 별개다. 많은 경험을 밀도있게 할 수 있는 것을 활용해서 의식적 …","fields":{"slug":"/하루의-실무경험/"},"frontmatter":{"date":"October 18, 2022","title":"하루의 회사 경험이 한 달의 공부보다 좋다","tags":["생각","회고","성장","경험"]},"rawMarkdownBody":"\n아무리 공부를 많이 했다고 해도 실무 경력은 무시할 수 없다.\n공부 상황과는 다르게 실무에서는 \"해야만 하는 것\"이 수없이 많이 발생한다. 공부할때는 안전한 환경에서 넘어갔을 일도 실무에서는 이슈로 다가올 때가 많다.\n여기에서 가장 밀도있는 경험 가능하다.\n하지만 이 경험은 역량의 성장과는 별개다. 많은 경험을 밀도있게 할 수 있는 것을 활용해서 의식적 성장 단계로 가야 진정한 성장이 일어난다."},{"excerpt":"우리는 무의식적으로 리서치를 선행하고자 함. 그러나 리서치는 필요할 때가 아니면 쓸모없는 일일 수 있음. \n리서치가 필요한 경우 1: 무엇을 할 지 모르겠을 때\n리서치가 필요한 경우 2: 떠오른 방법이 가장 좋은지 모르겠을 때 우리는 무슨 일을 시작할 때 무의식적으로 리서치를 선행하고자 한다. 기획이나 검색같은 것을 먼저 하려고 한다. 그러나 리서치는 필…","fields":{"slug":"/when-we-need-to-research/"},"frontmatter":{"date":"October 15, 2022","title":"리서치가 필요한 경우","tags":["생각","리서치","업무","연구"]},"rawMarkdownBody":"\n> 우리는 무의식적으로 리서치를 선행하고자 함. 그러나 리서치는 필요할 때가 아니면 쓸모없는 일일 수 있음. \n> 리서치가 필요한 경우 1: 무엇을 할 지 모르겠을 때\n> 리서치가 필요한 경우 2: 떠오른 방법이 가장 좋은지 모르겠을 때\n\n우리는 무슨 일을 시작할 때 무의식적으로 리서치를 선행하고자 한다. 기획이나 검색같은 것을 먼저 하려고 한다. 그러나 리서치는 필요할 때가 아니면 쓸모없는 일일 수 있다. 리서치는 목적을 가지고 진행해야 한다.\n\n### 리서치가 필요한 경우 1: 무엇을 할 지 모르겠을 때\n\n목표가 명확한데 그 목표를 달성하기 위해 당장 무엇을 해야 할지 모르겠다면 리서치를 할 필요가 있다. 다른 사람들은 그 목표를 달성하기 위해 어떻게 일 하는가? 우리와 비슷한 상황에 있는 사람들은 어떻게 일을 했는가? 완전 동일하지는 않더라도 비슷한 형태의 일은 예로부터 어떻게 진행되어 왔는가?\n다양한 자료가 공개되어 있다.\n\n\n### 리서치가 필요한 경우 2: 떠오른 방법이 가장 좋은지 모르겠을 때\n\n지금 내가 생각해 낸 접근 방식에 확신이 없을 때도 리서치를 시작하기 좋은 타이밍이다. 내가 접근한 방식이 통용되는 방식인가? 나만 생각한 방식인가? 더 좋은 방식은 없나? 나처럼 하다가 실패를 경험한 사람은 없나? 키워드를 알기 때문에 알아내기 쉽다.\n내가 선택한 솔루션이 이런 용도로 쓰이는지 알 수 있게 될 것이다.\n\n\n리서치는 메타인지를 늘려주는 일이다. 관습적으로 리서치를 하는 것 보다는, 꼭 필요할 때 하는 것이 좋다.\n"},{"excerpt":"들어가며 회사에서 영상 분석을 위해 내부적으로 만들어진 라이브러리를 사용하다가, 특정 상황에서 사용이 중단되는 현상애 맞닥뜨렸다. 어느 날, 대량 작업을 위해 새벽동안 서버에서 실행해두면 출근하고 보니 어느순간에선가 프로그램이 멈춰있는 것이다. 분명 전날까지도 전사적으로 잘 사용하던 라이브러리이고, 본인도 매일같이 사용하며 별다른 에러를 보지 못했다. 당…","fields":{"slug":"/memory-profiling/"},"frontmatter":{"date":"July 01, 2022","title":"memory profiler 사용해서 메모리 문제 해결하기","tags":["python","개발","til"]},"rawMarkdownBody":"\n## 들어가며\n- 회사에서 영상 분석을 위해 내부적으로 만들어진 라이브러리를 사용하다가, 특정 상황에서 사용이 중단되는 현상애 맞닥뜨렸다.\n- 어느 날, 대량 작업을 위해 새벽동안 서버에서 실행해두면 출근하고 보니 어느순간에선가 프로그램이 멈춰있는 것이다.\n- 분명 전날까지도 전사적으로 잘 사용하던 라이브러리이고, 본인도 매일같이 사용하며 별다른 에러를 보지 못했다.\n- 당일까지도 나를 제외하고 나머지 분들은 잘 쓰고 있었다. 무작정 버그 리포트를 하기도 난감한 상황이였다.\n- 몇번의 재작동을 해보니 항상 카운트가 900대에서 멈췄다. 그래서 몇가지 추측을 해보았다.\n\t- 1) 특정 영상이 들어간 경우 오류를 내뿜는다.\n\t- 2) 너무 오랜 시간동안 작동하여 에러가 난다.\n- 특정 영상이 들어간 경우 문제가 발생하는 경우가 종종 있었기에 해당 영상을 넘어가도록 총 2만개 되는 영상중에 앞 2000개를 건너뛰도록 해보았다. 그런데도 동일하게 900몇번째에서 프로그램이 작동을 멈추었다.\n- 램 문제를 의심하게 되었고, 프로그램을 작동 후 htop로 확인해보니 놀라운 상황을 볼 수 있었다. 시간이 지나면 지날수록 램 사용량이 수직 상승하는 것을 볼 수 있었다.\n- 분명 어디선가 메모리 누수가 일어나고 있다.\n\n\n## 해결 과정\n- 메모리 프로파일러를 설치하였다.\n- 가장 상위 실행 부분부터 (함수를 실행하는 일종의 메인함수 부분) 메모리 프로파일링을 실시하였다.\n  - for 이터레이션마다 메모리가 해제되지 않고 계속 상승하는 것을 볼 수 있었다.\n- 점점 의심이 가는 부분으로 좁혀가며 메모리 프로파일링을 진행하였다.\n- 이미지 분석을 위한 pytorch model을 load 하는 과정이 loop안에 있던 것을 볼 수 있었다.\n\n\n## 왜 특정 상황에서만 에러가 생겼나?\n- 평소에는 shell code로 1개 파일 내지는 1개 디랙토리만 검사하였기 때문에 메모리 누수가 눈에 띄지 않았다.\n- 심지어 실행 환경의 메모리가 상당히 넉넉하여 웬만한 경우에는 메모리 부족으로 프로그램이 중단되는 경우까지 가지는 않았다.\n- 하지만 대량 작업을 위해 해당 모듈을 import 하여 loop 안에서 실행하다보니 실행시마다 모델을 load 하게 되었고, 일정 이상 메모리에 과도하게 쌓여 시스템 전체에 에러를 발생하게 되었다.\n\n\n## 배운점\n- 프로그램 작동이 특정 조건에서 에러를 낸다면 램 누수를 의심해볼 필요가 있다.\n- DI 의 필요성 or 싱글톤의 필요성. 외부에서 model을 load하고 injection 하게 했다면 생기지 않았을 것이다.\n  - 아니면 모델을 불러오는 객체를 싱글톤으로 작성했다면 좋았을 것이다.\n\n\n\n## 참고자료\n- [memory-profiler · PyPI](https://pypi.org/project/memory-profiler/)\n"},{"excerpt":"몇년 전 상상했던 그 일을 제가 하게 되었습니다.\nAI 기술로 콘텐츠 시장을 혁신하고있는 라이언로켓에서 데이터 연구원으로 함께하게 되었습니다. 회사에 출근하고 보니 뭔가 스치듯 떠올랐습니다. 제 페이스북 타임라인을 뒤지다가 이런 글을 발견했습니다. 수능공부에 지쳐있을 즈음 막연히 떠오른 생각을 적은 글이였습니다. \n분명 산업에서 AI를 이용해 문제를 해결…","fields":{"slug":"/became-junior-data-scientist/"},"frontmatter":{"date":"May 28, 2022","title":"주니어 데이터 사이언티스트가 되었습니다","tags":["회고"]},"rawMarkdownBody":"\n![기막힌 미래 예측](fb-future-data-science.jpeg)\n\n몇년 전 상상했던 그 일을 제가 하게 되었습니다.\nAI 기술로 콘텐츠 시장을 혁신하고있는 라이언로켓에서 데이터 연구원으로 함께하게 되었습니다.\n\n회사에 출근하고 보니 뭔가 스치듯 떠올랐습니다. 제 페이스북 타임라인을 뒤지다가 이런 글을 발견했습니다. 수능공부에 지쳐있을 즈음 막연히 떠오른 생각을 적은 글이였습니다. \n분명 산업에서 AI를 이용해 문제를 해결하고자 하는 수요가 많아질 것이고, 그 사이에서 컴퓨터에게 학습시키는 일종의 선생님 역할의 무언가가 필요해지지 않을까 하는 생각으로 이어졌던 것입니다.\n\n당시 설리번 프로젝트에 집중하던 시기라 교육을 고민하고 있었습니다. 그러다보니 학생을 가르치는 선생님 처럼, 컴퓨터의 특성을 고민하고 가르치는 역할을 떠올리게 된 것이지 않을까 생각합니다. 최근 AI에 대한 윤리적 문제와 법적 문제까지 논의된다는 것을 생각하면, 단순히 지식을 전달하는 것을 넘어 인성 문제까지 고민해야 하는 선생님과 딱 들어맞는 일이지 않나 싶습니다.\n\n제가 하게 되리라고는 생각도 못한, 기존에 경험하지 못했던 완전히 새로운 일을 경험하고 있습니다. 전혀 해보지 못한 일을 잘 할 수 있을지 걱정을 많이 했습니다. 일이 재미있을 수 있다는 것이 신기합니다. 재미있게 일하며 배우고 성장할 수 있을 것 같습니다.\n\n\n## 데이터 중심의 AI로\n\n최근 업계에서는 모델 못지않게 데이터에 대한 노하우도 중요해진 것 같습니다.\n\n앤드류 응 교수님의 [A Chat with Andrew on MLOps: From Model-centric to Data-centric AI 세미나](https://www.youtube.com/watch?v=06-AZXmwHjo) 를 보니 제가 어떤 관점으로 배워가야 할 지 어느정도 감이 잡힙니다.\n"},{"excerpt":"저는 면접을 보는 경험보다는 면접관으로 참여한 경험이 더 많았습니다. 아직 사회활동을 하지 않있기 때문인데요. 제대로 된 면접을 본 경험이 중학교 방송부에 지원할 때, 고등학교 밴드부에 지원할때 말고는 없던 것으로 기억합니다. \n사실 면접은 많이 봤습니다. 그런데 제가 참여한 면접들은 제가 참여하기 싫은 면접이였거나, 형식적인 상황, 아니면 제가 별로 간…","fields":{"slug":"/1분-자기소개-회고/"},"frontmatter":{"date":"March 20, 2022","title":"면접을 꼭 준비해야 할까?","tags":["생각","회고","성장"]},"rawMarkdownBody":"\n저는 면접을 보는 경험보다는 면접관으로 참여한 경험이 더 많았습니다. 아직 사회활동을 하지 않있기 때문인데요. 제대로 된 면접을 본 경험이 중학교 방송부에 지원할 때, 고등학교 밴드부에 지원할때 말고는 없던 것으로 기억합니다. \n사실 면접은 많이 봤습니다. 그런데 제가 참여한 면접들은 제가 참여하기 싫은 면접이였거나, 형식적인 상황, 아니면 제가 별로 간절하지 않은 상황에서 본 면접이 대부분입니다. 이 면접에서 떨어뜨릴거면 떨어뜨려봐 하는 태도로 임했기 떄문에 별로 관심이 없었습니다.\n대학교에 와서부터는 어딘가에 소속되기보다는 제가 리더로서 조직을 만든 경우가 대부분이였기 때문에 면접을 볼 기회가 더욱 없었습니다.\n\n\n## 무언가 준비하는 태도에 대하여\n저는 학창시절 시험기간이라는 단어를 참 싫어했습니다. 수업때는 다른 공부를 하거나 잠만 자던 애들이 시험기간만 되면 갑자기 열심히 공부하려고 하는 모습이 보기 싫었기 때문입니다. 평소에 수업을 잘 듣고, 시험기간에는 원래 알던 지식을 보여주는게 맞지 반짝 공부해서 시험 점수를 올리는건 잘못되었다고 생각했습니다.\n분명 시험기간 전까지는 저보다 잘 모르는 것 같던 애들이 시험기간에 바짝 열심히 공부해서 저보다 점수를 잘 받는 것을 보며 샘이 났던 모양입니다. 네 맞습니다. 저는 사실 시험기간에 별로 공부를 안했습니다(...)\n\n저는 면접을 준비한다는 개념 자체에 대해서도 부정적이였습니다. 평소 본인의 모습을 보여주는게 면접이지 왜 자신을 잘 보여주기 위해 포장하고 준비하는지 모르겠습니다.\n면접은 사람과 사람간의 대화의 연장선상에 있는 행위라고 생각했습니다. 사람과 대화할 때 상대방이 거짓말을 치고 있다고 생각하고 접근하는 사람은 없습니다. 상대방이 내 말을 잘 못 알아들었거나 내가 듣고싶은 말이 아닐때 다시 물어보는게 당연한 대화의 순리입니다.\n\n그런데 면접에서 이렇게 준비를 잘 해오는 사람들이 많다보니 면접은 신뢰성 싸움이 되고 두번의 기회는 없는 진검승부의 장이 되어 버렸습니다. 사실 면접은 대부분의 경우 무례한 질문이 될 가능성이 대부분입니다. 대부분의 면접에서 면접을 준비해왔다는 것을 가정하여 질문하기 때문에 즉석해서 말을 만들어 내기에는 어려운 점이 참 많습니다.\n\n저는 1분 자기소가가 참 싫습니다. 자기 소개를 어떻게 1분안에 풀어나갈까요? 상대방이 알고싶은 관심사와 내 관심사를 일치시켜 나가며 자연스럽게 알아가는 것이지 꼭 토시 하나 틀리지 않고 논리적으로 정합한 문장을 연습해서 1분안에 풀어내야 할까요? 아무리 생각해도 마음에 드는 방식이 아니였습니다. 저는 이런 생각이 들어 면접 준비를 소홀히 했었습니다.\n\n얼마 전 처음으로 제대로 된, 그리고 나에게 간절한 기회로 주어진 면접에 참여 한 후 저는 참 당황했습니다. 무언가 잘못되었다는 생각이 들었습니다. 지금까지의 내 생각이 틀렸나 하는 생각이 들었습니다. 아무리 생각해도 내가 면접때 보여준 모습은 실망스럽기 짝이 없었습니다.\n\n면접이 끝나고 일주일간 곰곰히 생각해 보았습니다. 사실 밤에 잠이 안와 어쩔 수 없이 고민하게 되었습니다. 제가 가지고 있던 면접에 대한 생각은 사실 저의 자만심에서 비롯된 것이 아닌가 하는 결론에 이르렀습니다.\n면접을 왜 준비해야 할지에 대해 고민해봅니다.\n\n\n## 면접은 준비해야 한다.\n사람과 사람이 알아가는 과정은 일종의 사교적 활동일 경우가 대부분입니다. 성과와 직무와는 무관한 경우에 우리는 대화를 통해 서로 알아갑니다.\n\n면접은 약간 다릅니다. 사교적 주제를 바탕으로 일어나는 영업 활동이고 계약 활동입니다. 우리가 물건을 구매하거나 특정 계약을 판매하러 갈 때, 적어도 전화를 통해 상품을 홍보할 때 나름대로의 최선의 전략을 가지고 나아갑니다. 면접이 있다는 것을 알았을 때 나를 효과적으로 표현할 준비를 하고 다니는 것은 나를 판매하는 구직자로서는 당연한 일이였습니다.\n\n생각해보니 이 경험은 저도 많이 했던 경험입니다. VC들 앞에서, 지원사업 심사관들 앞에서 저는 우리 회사를 매력적으로 보이게 하기 위해 30초 되는 회사 소개를 한달 내내 고심하고 다듬고 연습했었습니다.\n제가 원래 가지고 있던 면접을 바라보는 시각에 빗대어 보자면 내 회사이기 때문에 굳이 회사 소개를 준비하지 않는 것과 비슷한 태도를 제 스스로에게 가지고 있던 것입니다.\n\n자기 소개는 스스로가 제일 잘 아는 영역이라 크게 어려운 일도 아닙니다. 하루정도만 시간을 들였다면 누구나 어느정도 수준까지는 준비할 수 있는 일이였습니다. 자기소개를 물어본다는 것은 누구나 알고 있는 일입니다. 근데 왜 저는 준비하지 않았을까요?\n해서 손해보는 것이 없고 아주 약간의 노력만 들이면 돌아올 이익이 큰데 제 알량한 고집때문에 또 큰 기회를 놓쳐버렸습니다.\n\n경험과, 경험에서 오는 동기부여는 가장 중요합니다. 이제 저는 필요성을 알았기 때문에 면접에서 최선을 다하여 준비할 수 있을 것 같습니다.\n\n참 아쉽습니다. 이 아쉬움을 숨길수가 없습니다. 이런 교훈은 왜 겪어보지 않고는 느끼기 힘들까요. 시간을 돌리고 싶지만 앞으로 나아가야 합니다. 내가 엄청난 실수를 저질렀다는 사실은 고통스럽지만 이미 저지른 실수는 돌아보지 말고 최선을 다하겠습니다."},{"excerpt":"자신있게 말하기는 중요하다.  자신이 있으려면 알고 있어야 한다. (적어도 안다는 생각이 들어야 한다.) 근데 모든 것을 알수는 없다 (알면 알수록 스스로 모른다는 것을 알 수 밖에 없기 때문에) 그래서, 내가 아는 범위를 정확히 인지하고 그 안에서 자신있게 말하는 것이 중요하다. 근데 내가 아는 범위가 자신있게 말하기는 어려운 범위라면 곤란하다. 결국 …","fields":{"slug":"/자신감은-지식으로-부터/"},"frontmatter":{"date":"March 15, 2022","title":"자신감은 지식에서 부터 나온다","tags":["생각","작성중"]},"rawMarkdownBody":"\n- 자신있게 말하기는 중요하다. \n- 자신이 있으려면 알고 있어야 한다. (적어도 안다는 생각이 들어야 한다.)\n  - 근데 모든 것을 알수는 없다 (알면 알수록 스스로 모른다는 것을 알 수 밖에 없기 때문에)\n- 그래서, 내가 아는 범위를 정확히 인지하고 그 안에서 자신있게 말하는 것이 중요하다.\n  - 근데 내가 아는 범위가 자신있게 말하기는 어려운 범위라면 곤란하다.\n- 결국 아는 범위를 늘리고 그 안에서 자신있게 말하는 것이 필요하다.\n"},{"excerpt":"들어가며 좋은 회사란 무엇일까요? 창업을 결심하고, 조직 운영 역할을 주로 담당하게 되면서 수없이 고민한 질문입니다. 저는 좋은 회사를 만들고 싶었기에 좋은 회사가 무엇인지 고민하기 시작했습니다.\n다음 창업에서는 실수하지 않기 위해 제가 생각하는 것을 공유하고 저만의 철학을 정리해보려고 합니다. 저는 이 글을 시리즈로 발전시켜 나가려고 합니다. 지금은 단…","fields":{"slug":"/좋은-조직이란-무엇인가/"},"frontmatter":{"date":"March 09, 2022","title":"좋은 조직에 대한 탐구를 시작하며","tags":["조직","생각"]},"rawMarkdownBody":"\n## 들어가며\n\n좋은 회사란 무엇일까요? 창업을 결심하고, 조직 운영 역할을 주로 담당하게 되면서 수없이 고민한 질문입니다. 저는 좋은 회사를 만들고 싶었기에 좋은 회사가 무엇인지 고민하기 시작했습니다.\n다음 창업에서는 실수하지 않기 위해 제가 생각하는 것을 공유하고 저만의 철학을 정리해보려고 합니다.\n\n저는 이 글을 시리즈로 발전시켜 나가려고 합니다. 지금은 단어조차 정리가 되어있지 않아 비문도 있고 과장된 표현이 있을 수 있습니다. 지금은 생각나는 대로 정리하고 있습니다. 저는 이 문서를 일종의 백과사전처럼 저 스스로도 항상 보며 고민하고, 반박하고, 덧붙여 나가려고 합니다.\n\n아래 있는 내용의 각 항목은 다시 작은 글로 쓰여질 수 있습니다. 구성이 바뀔수도 있습니다. 이 시리즈를 완성하기 위해서는 몇년이 걸릴지, 몇십년이 걸릴지 모르겠습니다.\n\n좋은 조직이 무엇인지 알기 위해서는 많은 토론이 필요합니다. 언제든지 많은 의견을 주시면 감사하겠습니다.\n\n## 1. 우리가 팀원들의 이야기에 귀를 기울여야 하는 이유\n\n> 우리는 아직 성장해야 하기 때문에 아름다운 조직 문화는 나중에 도입하자!\n\n좋은 조직을 다루기 전에 좋은 조직에 대해 왜 고민해야 하는지를 먼저 생각해 보겠습니다.\n팀원들의 행복을 추구하는 일이 회사의 성과를 일부 포기하는 일이라고 생각되시나요? 그렇지 않습니다. 팀원들이 행복한 것이 실제로 회사에 도움이 되는 일입니다.\n\n다행히도 많은 사람들이 이 질문을 던졌고, 많은 사람들이 답을 찾아 나서고 있습니다. 팀원들의 행복을 추구하는 것은 회사의 영리에 확실한 도움이 됩니다.\n\n대리인 이론에서는 회사의 오너는 이익을 추구하고, 조직 구성원은 자신의 이익을 최대로 생각하기에 손실이 발생할 수 밖에 없다고 합니다. 결국 서로 자신의 이득을 최대로 얻기 위해 싸울 수 밖에 없고 여기서 부터 관리와 통제가 시작됩니다.\n\n관리와 통제 그 자체로도 비효율이 있습니다. 하지만 가장 큰 문제는 사람은 대부분 관리와 통제를 받을 때 창의성이 떨어진다는 것입니다.조직 구성원이 스스로 일하고 싶어져야 최대한의 효율이 나올 수 있습니다.\n\n회사와 조직 구성원의 목적이 같아질 수 있을까요? 여기서 부터 조직 문화가 시작됩니다. 조직 문화를 구축하는 행위는 모든 구성원이 같은 생각을 할 수 있도록 도와주는 강력한 도구이자 거의 유일한 방법입니다.\n\n\n### 1-1. 회사의 목표는 무엇인가?\n회사의 목표는 무엇일까요? 여러 목표가 있지만 최종적으로는 더 많은 이익을 얻기 위함이 있습니다.\n* 우리의 목표는 회사의 성장이다.\n\t* 매출 증대, 각종 KPI 초과달성, 투자 유치\n* 회사가 성장하려면 개인이 맡은 부분에서 강력한 퍼포먼스가 나와야 한다.\n* 강력한 퍼포먼스가 나오려면 팀원들이 강력한 퍼포먼스를 내 주어야 한다. (스스로 한계까지 몰아내주는 것)\n* 팀원이 스스로를 한계까지 밀어 붙이기 위해서는  **팀원 스스로에게 강력한 동기가 있어야 한다.**\n\n### 1-2. 그렇다면 동기는 어디서부터 올까?\n* 그냥 동기부여가 되는 경우\n\t* 그냥 일하는게 재미있음 (워커홀릭)\n\t* 개인의 비전과 회사의 비전이 일치함 (자아 실현의 욕구)\n\t* 구성원간의 끈끈한 재미가 있음 (친구같음)\n* 성공에 대한 강력한 믿음\n\t* 로켓에 탄 것만 같음\n* 어쨋든 내가 한 만큼 보상을 받는다는 믿음\n\t* 다른거 없어도 일단 돈을 많이 준다\n\n### 1-3. 결국, 팀원에게 동기부여를 줄 무기가 필요하다.\n* 재미 느끼게 하기 → 재미를 느낄 분위기를 만들기\n\t* 문화 설계, 구성원 개인이 각자 재미있어지려고 노력, 재미있는 구성원을 확보함, 비꼬지 않는 진짜 친구같은 분위기 등\n\t* 하고 싶은 일을 하게 만들기, 본인의 관심사와 회사의 관심사를 연결시키기\n\t* 강력한 내적 동기부여 (비전, 미션 얼라인)\n* 회사의 성장을 시각적으로 보여주기 → 리더가 성과를 내고 수치로 보여주기\n\t* 투자 유치, 언론 노출, 인력 충원 사옥확장 등 외적 성장\n\t* 지표 초과달성, 퍼포먼스 시각화와 자주 공유하기\n\t* 성장과 내 보상이 동기화 되면 더욱 시너지 (스톡옵션, 성과급 약속)\n\t\t* 뒤에서 말할 미래 보상 보장과 이어짐\n* 눈 앞의 보상 → 돈 많이 주기\n\t* 연봉을 평균보다 많이 준다.\n\t* 엄청난 성과급을 준다.\n\t* 연봉이 적더라도 엄청난 복지혜택을 준다.\n\t\t* 식비, 교통비, 주거비, 자녀 복지, 가족 복지 등...\n* 미래 보상을 보장해주기\n\t* 당장 돈이 없다면 우리는 두 가지 무기를 최대한 잘 활용해야 함.\n\t\t* 스톡옵션, 주식 지급, 성과에 따른 연봉 인상 계약\n\t* 지금의 보상보다는 회사에 재투자하여 미래 수익으로 나누어 갖자는 공감대를 형성.\n\t* 동시에, 미래에 보상을 **많이 받을 것**이라는 믿음을 주어야 함.\n\n\n### 1-4. 쌓아 올리기는 어렵지만 무너뜨리기는 쉽다.\n- 앞서 생각해본 보상책은 점진적으로 발전한다.\n\t- 처음에는 미미하지만 나중에는 원금보다 이자가 커진다.\n- 다만, 동기를 깎아먹는 행위도 있다. 동기를 깎아먹는 행위는 단 한번에 모든 것을 무너뜨릴 수 있다.\n- 무너뜨리는 행위는 너무나 당연히 어길 일이 없을거라고 생각할 수도 있다. 하지만 항상 명심해야 한다. 무너뜨리는 행위는 한 번의 실수가 돌이킬 수 없는 피해를 준다. \n- 무너뜨리는 요인은 복잡하게 얽혀있다. 단순히 하나의 정책을 도입하거나 한 번의 행동을 바꿈으로 모든 것이 안전해질 것이라고 생각해서는 안 된다.\n* 사람에 대한 신뢰, 회사에 대한 신뢰를 무너뜨리는 행위\n\t* 비리, 불법을 저지름\n\t* 중요한 약속을 어김\n\t* 사람으로 존중받지 못한다고 느끼게 만듦\n* 장기적 성장에 대한 불신\n\t- 회사가 성장하는 방향에 대한 공감이 되지 않는 경우\n\t- 탑-다운 방식의 업무를 지속적으로 진행하지만 성과가 나지 않음\n\n\n## 2. 조직에서 일어날 수 있는 문제들\n\n그렇다면 좋지 않은 회사를 만드는 징조는 무엇이 있을까요? 이 챕터는 조직에서 일어날 수 있는 문제들을 정리하고 좋지 않은 조직이 되는 원인을 탐구해보려고 합니다.\n\n### 공유 부족\n- 팀원들의 적극적인 의견 제시가 부족하다.\n- 간단한 생각이나 의견이라도 던질 분위기가 안된다.\n- 기능적인 기획이 약해보인다.\n- 사업적인 방향성 고민이 더 필요해보인다.\n- 회사 내 팀원간의 관계보다는 내 일만 하면 되는 조직문화이다.\n\n\n### 마이크로매니징\n- 리더가 너무 많은 것을 맡아서 한다.\n\t- 자연스럽게 리더로서 역할도 못하고, 그렇다고 실무자로서 협업이 잘 되지도 않는다\n\t- 실무자로 있으니 협업하기 불편하다 (말하다 보면 실무자로서 말하는건지 리더로서 말하는 건지 헷갈린다.)\n\t- 실무자로서 지켜야 할 일을 지키지 않을 때가 많다 (답변 지연, 듀데이트 밀림, 우선순위 변경 등)\n- 실무자 단에서 완성된 것이 리더단에서 급격히 변화하는 경우가 있다.\n\t- 그리고 그것을 다시 실무자가 받아서 똑같이 해야 한다.\n\n\n### 성장에 대한 믿음 부족\n- 비전/미션 얼라인에 별로 신경쓰지 않는다.\n- 회사 상황 공유가 부족하다.\n- 기능들은 많이 만들었으나 유지가 되지 않음\n\n\n### 항상성 부족\n- 지금 있는 팀원들 유지에 별로 신경쓰지 않는 것 같다.\n- 리더가 퍼포먼스에는 강해도 인간을 다루는 감수성이 약해보인다 (다른 사람의 감정을 고려하지 않아보인다)\n    - 회사의 신뢰를 내려깎는 충분히 심각한 문제임에도 나서서 설명하지 않는다.\n- 한다고 해놓고 안하는 것들이 많다. 점차 쌓여간다.\n    - 기능을 만들어 두고 방치한다.\n    - 설정한 우선순위가 너무 자주 바뀐다.\n\t- 팀원들이 헷갈려 하는 것 같다 → 얼라인이 매번 깨진다 → 팀 결속력이 깨진다.\n\t- 조직구조 개편, 하다못해 회사에서 사용하는 협업 툴의 잦은 변경 등\n\t- 이런 사소한 것들이 지켜지지 않으면 다른 것도 바뀔 것이라고 생각이 되어 불안해진다.\n\n\n## 3. 좋은게 무엇일까?\n\n좋은 회사, 좋은 조직. 좋은게 뭘까요? 누구나 상상할 수 있지만 너무 추상적인 단어입니다. \"좋다\" 라는 단어는 뭐라고 딱 정의하기 쉽지 않습니다.\n좋다는 것의 기준이 무엇인지 고민해봅시다.\n\n좋은 회사란 무엇일까요? 각자 다양한 관점을 가지고 있기에, 각자의 기준으로 다양하게 평가할 수 있을 것입니다. 하지만 확실한 좋은 회사의 특징을 생각해 보았습니다. 좋은 회사에서는 모든 구성원이 저마다의 기준으로 행복을 찾아갈 수 있을 것입니다.\n\n어떨때 조직 구성원들은 좋은 조직이라고 느낄까요? 좋은 조직이라고 느껴지는 조직의 특징은 무엇일까요?"},{"excerpt":"들어가며 최근에 블로그에 미완성 글도 공개하기 시작했습니다. 보시는 분들에 따라 좋게 생각하시는 분들도 계실 것이고, 무언가 얻어가려고 들어왔는데 내용이 없어 안좋게 생각하시는 분들도 계실 것으로 생각합니다. 저도 제 블로그를 볼때면 \"미완성의 글을 공개하는 것이 좋은것인가?\" 라는 의문을 매번 품게 됩니다.\n저 스스로 생각을 정리할 겸 제가 미완성 글을…","fields":{"slug":"/미완성된-글을-공개하는-이유/"},"frontmatter":{"date":"March 07, 2022","title":"미완성된 글을 공개하는 이유","tags":["생각","짧은글"]},"rawMarkdownBody":"\n## 들어가며\n최근에 블로그에 미완성 글도 공개하기 시작했습니다. 보시는 분들에 따라 좋게 생각하시는 분들도 계실 것이고, 무언가 얻어가려고 들어왔는데 내용이 없어 안좋게 생각하시는 분들도 계실 것으로 생각합니다.\n\n저도 제 블로그를 볼때면 \"미완성의 글을 공개하는 것이 좋은것인가?\" 라는 의문을 매번 품게 됩니다.\n저 스스로 생각을 정리할 겸 제가 미완성 글을 공개하는 이유에 대해 적어보려고 합니다.\n\n\n## 블로그를 하는 이유\n제가 블로그에 글을 올리는 이유에 대해 다시 고민해 보았습니다.\n오래 전부터 생각나는 아이디어들을 놓치지 않고 기록하기 위해 힘써 왔습니다. 특히 창업 활동을 하다보면 수많은 생각들이 머리속에 떠오르는데, 머리를 식힐 겸 생각나는 것들을 모두 컴퓨터 메모장이나 제 앞에 있는 종이에 적는 습관을 들였습니다. 지속하다 보니 컴퓨터 메모장에 생각을 생각을 적는 습관이 생겼습니다.\n문제는 생각난 것을 완성시키는 습관이 들지는 못했다는 것입니다. 제 생각을 발전시키고 남들과 공유하는 것을 좋아하다보니 글로 만들고 싶다는 생각을 강하게 가지고 있습니다만, 몇년째 제목만 작성하고 발전시키지는 못한 글이 쌓이기 시작했습니다.\n\n가끔 제 메모장을 보다보면 막연한 생각이 들게 되었습니다. 언제 날 잡고 글 하나씩 완성시키자 하는 생각을 하는데 쓰다보면 논문이나 적어도 작은 책 수준으로 써야 한다는 강박관념에 사로잡히게 되었습니다. 결국 지켜 포기하고 하나도 완성하지 못하는 일이 생겼습니다.\n\n저는 무언가 생각하거나 학습할 때 날잡고 해치우는 스타일이 아닙니다. 머릿속에 오랫동안 넣어두고 걸어다니거나 다른 것을 볼때 제가 고민하던 것과 연결하여 생각하는 방식으로 생각을 발전시켜 나가는 스타일입니다.\n그런데 글을 쓸때면 완성해야 한다는 강박관념에 결국 완성하고 공개하지 못하는 현상이 생겼습니다.\n\n원래 저는 미디움을 주로 사용했습니다. 얼마 전 브런치에서도 글을 공개하기 시작했는데 두 플랫폼 모두 가장 완성된 글을 공개해야 할 것 같은 느낌을 주는 플랫폼이라는 생각이 들었습니다.\n그렇기에 제 개인적인 메모장처럼 사용해도 부담 없는 github pages 블로그를 개설하게 되었습니다. 이 블로그에서는 무슨 일을 해도 될 것 같거든요.\n\n\n## 미완성된 글에 대하여\n블로그를 꾸준히 하기 위해서는 부담이 드는 것은 최소화 하는 것이 좋다고 생각합니다. 그 방법으로 저는 미완성된 글이라도 공유하는 것을 선택했습니다.\n\n위키피디아같은 참여형 온라인 참여형 백과사전 플랫폼을 아시나요? 저는 블로그를 위키피디아처럼 운영해보려고 합니다. 물론 아직 여러명이 참여하는 것은 고려하고 있지 않습니다만, github를 이용하여 pull request를 날려주시면 어느정도 가능하긴 하겠네요ㅎㅎ\n\n일단 생각나는 주제는 제목만 신경쓰고 블로그에 페이지를 개설하려고 합니다.\n점차 해당 주제에 대해 알게 되면 지속적으로 내용을 추가하며 글을 발전시켜 나가려고 합니다.\n\n이렇게 적고 보니 미완성된 글을 공개하는 것에 대해 어느정도 마음이 편해졌습니다.\n앞으로는 더욱 읽을만한 글로 찾아뵙도록 노력하겠습니다.\n\n감사합니다!"},{"excerpt":"들어가며 비개발자에게 람다 함수의 필요성에 대해 설명한다고 생각해보았습니다. 저는 단 한 번만 쓰는 함수를 생성하는 것은 메모리나 처리 시간을 잡아먹는 것 대비 재사용이 없기 때문에 함수로 만들어 두는 것은 낭비가 있기 때문에 람다함수를 쓰는 것으로 이해하고 있었습니다. 그래서 낭비를 줄이기 위해 람다를 쓰면 좋다는 말을 해야하는데 비개발자 압장에서 필요…","fields":{"slug":"/개발자의-역할/"},"frontmatter":{"date":"March 04, 2022","title":"개발자에게 일이란 무엇인가?","tags":["조직","생각","짧은글"]},"rawMarkdownBody":"\n## 들어가며\n\n비개발자에게 람다 함수의 필요성에 대해 설명한다고 생각해보았습니다.\n\n저는 단 한 번만 쓰는 함수를 생성하는 것은 메모리나 처리 시간을 잡아먹는 것 대비 재사용이 없기 때문에 함수로 만들어 두는 것은 낭비가 있기 때문에 람다함수를 쓰는 것으로 이해하고 있었습니다.\n\n그래서 낭비를 줄이기 위해 람다를 쓰면 좋다는 말을 해야하는데 비개발자 압장에서 필요성에 공감할 수 있을지에 대한 의문이 들었습니다. 실제로 개발 공부를 하다보면 굳이 필요없어 보이는 기능들이 있습니다. 하지만 좋은 개발자가 되려면 이 차이들을 명확히 알고 있어야 합니다. 왜 개발자는 이런 사소한 차이에 관심을 가질까요?\n\n\n## 회사에서 개발자의 역할은 무엇인가?\n1. 사업에 필요한 소프트웨어 기능을 만드는 일\n2. 만든 소프트웨어에 확장성을 부여하는 일\n3. 만든 소프트웨어가 장기적이고 안정적으로 성장하게 하는 일\n\n\n개발자의 업무는 단순히 정해진 서비스 기능만 구현하는 것이 아니라, 그 일이 잘 돌아가게 하기 위한 부수적인 부분까지 책임을 져야 합니다.\n\n개발자는 더 좋고 효율적인 구조가 무엇인지 고민하고 철학을 적용하여 개발할 필요가 있습니다. 동일한 기능이 문제 없이 작동하게 만드는 것이 역할이 아닙니다. 회사의 엔지니어링 분야 전반에서 조직이 제대로 기능할 수 있도록 하는 역할도 포함합니다.\n\n자연스럽게 아키텍쳐나 개발 문화와 이어집니다. 개발자는 코딩 그 자체 뿐만 아니라 개발 조직에 관심을 가져야 합니다.\n\n개발을 처음 시작할때는 람다 함수같은 비직관적인 표현을 아는 것이 이해하기 힘들 수 있다. 실제로 함수를 쓰는 거랑 기능적으로 동일하지만, 그럼에도 차이점을 명확히 알고 있어야 최선의 선택을 할 수 있습니다."},{"excerpt":"들어가며 보통 언어를 공부하면 쉽게 사용할 수 있도록 만들어진 문법일수록 실행시간에서 손해보는 경우가 많았습니다.\n리스트 컴프리헨션도 일종의 언어 수준의 편의기능으로 생각했기에 당연히 느릴 것이라고 생각했습니다. 언어의 편의기능을 사용하면 가독성과 개발속도에서 이점을 가져가고 속도에서 약간 손해를 보는 것이라고 생각하면 이해가 쉬웠습니다.\n그런데 자세히 …","fields":{"slug":"/why-fast-list-comprehension-python/"},"frontmatter":{"date":"February 27, 2022","title":"파이썬에서 List Comprehension이 더 빠른 이유","tags":["python"]},"rawMarkdownBody":"\n## 들어가며\n보통 언어를 공부하면 쉽게 사용할 수 있도록 만들어진 문법일수록 실행시간에서 손해보는 경우가 많았습니다.\n리스트 컴프리헨션도 일종의 언어 수준의 편의기능으로 생각했기에 당연히 느릴 것이라고 생각했습니다. 언어의 편의기능을 사용하면 가독성과 개발속도에서 이점을 가져가고 속도에서 약간 손해를 보는 것이라고 생각하면 이해가 쉬웠습니다.\n그런데 자세히 알게 되니 충격적인 사실이 있었습니다. 리스트 컴프리헨션을 쓰는 이유는 속도측면도 있다는 사실을 알았습니다.\n왜 그럴까? 왜 그렇게 만들어졌을까? 궁금해서 찾아보았습니다.\n\n\n## 접근 방법\n많은 분들이 리스트 컴프리헨션을 설명해주셨지만 제 마음에 드는 설명이 없었습니다. 리스트 컴프리헨션이 더 빠르다는 것도 충분히 중급 이상의 지식으로 취급되다 보니 더욱 자세한 설명을 찾기는 쉽지 않았습니다.\n\n사실 이 글을 쓰기 무색하게도 이미 제가 접근하고 싶은 방법대로 똑같이 접근해주신 분이 계셨습니다. 욱재님께 감사드립니다.\n\n파이썬은 스크립트 언어이지만 실행하기 전에 자체 엔진에서 해석할 수 있는 바이너리 코드로 변환(컴파일)됩니다. 동작은 같지만 바이너리 코드 상에서 다를 수 있기 때문에 성능을 비교할 때 바이너리 코드를 확인하곤 합니다.\n\n파이썬에서는 아래 모듈을 통해 바이너리 코드를 쉽게 읽을 수 있는 형태로 볼 수 있습니다.\n\n``` python\n>>> import dis\n>>> def hello_world():\n...     print(\"hello world!\")\n...\n>>> dis.dis(hello_world)\n  2           0 LOAD_GLOBAL              0 (print)\n              2 LOAD_CONST               1 ('hello world!')\n              4 CALL_FUNCTION            1\n              6 POP_TOP\n              8 LOAD_CONST               0 (None)\n             10 RETURN_VALUE\n>>>\n```\n\n이 모듈을 활용하여 for loop로 작동할때와, 같은 동작을 list comprehension으로 구현했을때의 바이너리 코드를 분석하여 작동을 비교해보려고 합니다.\n\n모듈에서 나타난 바이트 코드는 [dis — Disassembler for Python bytecode — Python 3.7.12 documentation](https://docs.python.org/3.7/library/dis.html#opcode-LIST_APPEND) 에 있습니다.\n\n\n## 작동 방식 \n\n#### List append 를 사용할 때의 바이트 코드\n``` python\n>>> import dis\n>>> def use_append():\n...     result = []\n...     for i in range(10000):\n...             result.append(i)\n...     return result\n...\n>>> dis.dis(use_append)\n  2           0 BUILD_LIST               0\n              2 STORE_FAST               0 (result)\n\n  3           4 LOAD_GLOBAL              0 (range)\n              6 LOAD_CONST               1 (10000)\n              8 CALL_FUNCTION            1\n             10 GET_ITER\n        >>   12 FOR_ITER                14 (to 28)\n             14 STORE_FAST               1 (i)\n\n  4          16 LOAD_FAST                0 (result)\n             18 LOAD_METHOD              1 (append)\n             20 LOAD_FAST                1 (i)\n             22 CALL_METHOD              1\n             24 POP_TOP\n             26 JUMP_ABSOLUTE           12\n\n  5     >>   28 LOAD_FAST                0 (result)\n             30 RETURN_VALUE\n\n```\n\n\n\n\n#### List Comprehension 의 바이트 코드\n``` python\n>>> def use_compre():\n...     return [i for i in range(10000)]\n...\n>>> dis.dis(use_compre)\n  2           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fe36818f870, file \"<stdin>\", line 2>)\n              2 LOAD_CONST               2 ('use_compre.<locals>.<listcomp>')\n              4 MAKE_FUNCTION            0\n              6 LOAD_GLOBAL              0 (range)\n              8 LOAD_CONST               3 (10000)\n             10 CALL_FUNCTION            1\n             12 GET_ITER\n             14 CALL_FUNCTION            1\n             16 RETURN_VALUE\n\nDisassembly of <code object <listcomp> at 0x7fe36818f870, file \"<stdin>\", line 2>:\n  2           0 BUILD_LIST               0\n              2 LOAD_FAST                0 (.0)\n        >>    4 FOR_ITER                 8 (to 14)\n              6 STORE_FAST               1 (i)\n              8 LOAD_FAST                1 (i)\n             10 LIST_APPEND              2\n             12 JUMP_ABSOLUTE            4\n        >>   14 RETURN_VALUE\n```\n\n두 코드의 차이점을 보겠습니다.\n\n리스트 컴프리헨션을 사용할 때의 코드를 보면 두 부분으로 나누어져 있는 것을 확인할 수 있습니다. MAKE_FUNCTION을 보니 자체적으로 함수를 만들어서 실행하는 것 같습니다. <listcomp>라고 하는 오브젝트가 있습니다.\n\n\n우리는 for loop를 이용한 것과 list comprehension을 이용한 것을 비교하고는 합니다. 루프에서 어떤 차이가 있는지 보겠습니다.\n\nfor loop를 이용한 함수에서는 12번 부터 26번 전까지 loop를 수행합니다.\nlist comprehension 에서는 <listcomp> 아래 4번부터 12번까지 loop를 수행합니다.\n\nfor loop 에서는 append method를 call 하고, lists comprehension에서는 LIST_APPEND 바이트 코드를 사용하여 append를 하는 것으로 추측됩니다.\n\n`LIST_APPEND` 를 사용하는 것과 append를 `CALL_METHOD`로 불러오는 것의 차이때문으로 추측해볼 수 있는데, 실제로 문서에 따르면 LIST_APPEND에서 불러오는 코드와 list append에서 불러오는 함수는 동일한 함수를 불러오고 있습니다.\n\n결국 두 방식 모두 append하는 부분에서는 차이가 없습니다.\n\n## 실제로 차이가 나는 부분은?\nlist append 방식에서는 `CALL_METHOD`를 통해 append 메소드를 사용합니다.\n그렇다면 `CALL_METHOD` 로직을 타면서 생기는 비효율이 있지 않을까 생각해볼 수 있습니다.\n\n욱재님의 블로그에서 빈 함수를 불러오는 for loop와 아무 것도 실행되지 않는 for loop를 도는 시간차이를 비교해 두었습니다. 저도 한번 해보겠습니다.\n\n``` python\n% python3 -m timeit -s \"def empty(): pass\" \"for i in range(10000000): empty()\"\n1 loop, best of 5: 665 msec per loop\n\n% python3 -m timeit \"for i in range(10000000): pass\"\n2 loops, best of 5: 189 msec per loop\n```\n\n진짜로 엄청난 시간 차이가 발생합니다.\n\nlist append 메소드를 사용하는 것과, list comprehension에서 자체적으로 append를 하는 것은 파이썬이 특정 메소드를 불러올 때 생기는 오버해드에서 생겨난 것이라고 할 수 있습니다.\n\n\n## 참고자료\n- [🐍 List Comprehension이 빠른 이유를 찾아보자 – Ukjae Jeong](https://jeongukjae.github.io/posts/inspecting-list-comprehension/)"},{"excerpt":"들어가며 파이썬 기초 문법을 다시 살펴보며 턱 걸리는 지점이 있었습니다. 파이썬의 클래스 내에서 정의된 메소드는 첫 인자로 객체 자신의 클래스 인스턴스를 받습니다. 관례상 self로 받는 것을 기억하시면 좋습니다. 클래스 메소드의 첫 인자는 객체 인스턴스가 있어야 한다는 점 떄문에 인스턴스를 생성하지 않고는 메소드를 호출할 수 없습니다. 인스턴스를 생성하…","fields":{"slug":"/python-staticmethod-classmethod/"},"frontmatter":{"date":"February 12, 2022","title":"Python @staticmethod @classmethod 왜 사용할까?","tags":["python"]},"rawMarkdownBody":"\n## 들어가며\n\n파이썬 기초 문법을 다시 살펴보며 턱 걸리는 지점이 있었습니다. 파이썬의 클래스 내에서 정의된 메소드는 첫 인자로 객체 자신의 클래스 인스턴스를 받습니다. 관례상 self로 받는 것을 기억하시면 좋습니다.\n\n클래스 메소드의 첫 인자는 객체 인스턴스가 있어야 한다는 점 떄문에 인스턴스를 생성하지 않고는 메소드를 호출할 수 없습니다. 인스턴스를 생성하지 않고 메소드를 사용할 일이 있을 때 @staticmethod와 @classmethod를 사용한다는 것으로 이해하였습니다.\n\n@classmethod는 인스턴스 대신 클래스에 정의된 것들을 활용할 수 있습니다. 우리가 보통 cls로 받는 그 인자입니다.\n\n그런데 @staticmethod는 아무 것도 받지 않습니다. 그럼 이게 단순히 밖에서 만든 함수와 다른게 무엇인지 의문이 들었습니다.\n\n@staticmethod로 정의한 것은 무엇이 다르고 용도는 무엇일까요?\n\n\n## @classmethod의 필요성\n클래스 메소드는 객체 인스턴스를 수정할 수 없습니다. 대신 클래스에서 직접 호출할 수 있다는 점과 클래스에 직접 접근할 수 있다는 점 때문에 다음과 같이 사용될 수 있습니다.\n\n### 1) 클래스 변수에 접근하여 공통된 변화를 주는 활용\n\n클래스가 공통으로 가진 변수를 참조하고 조작하여 해당 클래스로 만들어진 모든 인스턴스를 일괄적으로 제어할 수 있습니다. 개인적으로는 예측 가능성 측면에서 사용하기 어려울 수 있다고 생각합니다만, 객체라는 특성상 오히려 직관적으로 이해할 수 있습니다.\n\n예를들어, 공통된 이자율을 가진 계좌가 있고 각 계좌는 서로 다른 금액을 가질 수 있습니다.\n공통된 이자율이 변경될 때 아래처럼 활용할 수 있습니다.\n\n\n``` python\nclass Account:\n    interest_rate: float = 0.1  # 이자율\n\n    def __init__(self, amount: int):\n        self.amount = amount\n\n    @classmethod\n    def change_rate(cls, target_rate: float):\n        cls.interest_rate = target_rate\n\n    def give_interest(self):\n        self.amount += int(self.amount * self.interest_rate)\n\n\nif __name__ == \"__main__\":\n\n    account1 = Account(100000)\n    account2 = Account(1000)\n\n    print(\"account1.amount \", account1.amount)  # 100000\n    print(\"account2.amount \", account2.amount)  # 1000\n\n    account1.give_interest()\n    account2.give_interest()\n\n    print(\"account1.amount \", account1.amount)  # 110000\n    print(\"account2.amount \", account2.amount)  # 1100\n\n    # 공통된 이자율을 20%로 변경\n    Account.change_rate(0.2)\n\n    account1.give_interest()\n    account2.give_interest()\n\n    print(\"account1.amount \", account1.amount)  # 132000\n    print(\"account2.amount \", account2.amount)  # 1320\n```\n   \n\n### 2) 생성자를 랩핑하는 용도로 사용하기 위해\n\n특정 객체를 여러 입력 형태로 생성하게 될 때도 있습니다. 별도 로직을 작성해도 되지만 아래처럼 사용하기 쉽게 클래스 메소드로 구현할 수 있습니다. 클래스 메소드를 설멍할 때 자주 사용하는 예시입니다.\n\n``` python\nclass BirthDay:\n\n    def __init__(self, birth_year: int, birth_month: int, birth_date: int):\n        self.year = birth_year\n        self.month = birth_month\n        self.date = birth_date\n\n    @classmethod\n    def by_security_number(cls, security_number: str):\n        # 간단한 예시를 위해 입력은 1900년대로 가정하겠습니다.\n\n        birth_year = 1900 + int(security_number[:2])\n        birth_month = int(security_number[2:4])\n        birth_date = int(security_number[4:6])\n\n        return cls(birth_year, birth_month, birth_date)\n\n\nif __name__ == \"__main__\":\n    \n    birth1 = BirthDay(1999, 1, 31)\n    birth2 = BirthDay.by_security_number(\"990131\")\n    \n    print(birth1.year)\n    print(birth2.year)\n```\n\n\n## @staticmethod의 필요성\n\n그런데, 스테틱 메소드의 필요성에 대해 고민하다 보니 이해하기에 상당히 어려움이 있었습니다. 클래스 안에서 메소드를 만들되, 클래스와 영향이 전혀 없다는 것을 나타내는 것 이상 이하도 아니였습니다. 처음 든 생각은 '이럴거면 클래스 밖에서 정의하면 되지 않나?'였습니다.\n\n### JAVA static method에 대한 고찰\n파이썬보다 더욱 깐깐한 자바와 같은 언어에서는 static method를 어떤 시각으로 바라보는지 생각해 보았습니다.\n자바에서 정적 메소드의 특징은 다음과 같이 정리될 수 있습니다.\n\n1. 클래스 인스턴스를 만들지 않고 호출할 수 있다.\n2. 인스턴스에서는 호출될 수 없다.\n\n정적 메소드는 클래스 이름을 빌려 관련있는 유틸성 합수를 만들때 사용합니다. static이라는 이름이 있는 것 처럼 정적인 상태입니다. 이 메소드는 가변적인 상태를 가지지 않고, 다른 것의 상태도 변경시키지 않습니다.\n\n또한 해당 메소드는 오버라이딩 되지 않습니다. 클래스에서 정의된 것은 바뀌지 않습니다.\n\n항상 동작을 예측할 수 있다는 점에서 인스턴스와의 상호작용을 배제하며 일관된 활용을 보장하는 용도로 사용될 것으로 생각합니다.\n\n\n## 파이썬에서의 필요성을 잡어보며\n문제는, 파이썬에서는 해당 메소드를 인스턴스에서도 호출할 수 있습니다. 심지어 오버라이딩하여 다른 용도가 되어버릴 수도 있습니다.\n파이썬에서 @staticmethod는 그냥 장식 이상 이하도 아닌 것 같습니다. 이럴리가 없는데... 고민을 계속 해보았습니다.\n\n답을 찾기 위해 관련 키워드로 검색하자마자 저와 비슷한 생각을 가진 사례가 전 세계적으로 존재하는 것 같은 느낌을 받았습니다. 실제로 관련 논쟁도 있다고 합니다. 단순히 cls와 self 두가지를 쓰지 않는 메소드라고 하기에는 넘어가기 어려워서 나름대로 고민해본 필요성을 적어봅니다.\n\n\n### 1) 해당 클래스와 명확한 관련성을 표현하기 위해\n스태틱 메소드가 클래스와 직접적인 상호작용이 없다고 하더라도 해당 클래스와 명확한 관련성을 명시하는 것이 좋을 때도 있습니다.\n유틸성 메소드를 별도 모듈로 빼서 사용하는 것도 좋으나 표현상 해당 메소드가 해당 클래스와 연관되어 사용한다는 사실을 명시하는 것이 좋을 수 있습니다.\n\n### 2) 해당 클래스 내부에서만 사용되는 유틸성 메소드를 표현하기 위해\n해당 클래스 내부에서만 사용되는 메소드가 있다고 합시다. 해당 클래스 내부에서만 사용하기 때문에 클래스 내부에 메소드로 만드는 것도 좋은 전략일 것입니다.\n\n적고 보니 충분히 대안이 있습니다. 위에서 찾은 필요성을 달성하기 위해서는 다른 방법도 충분히 있습니다.\n\n파이썬에서 유의미한 활용을 하기 위해서는 다른 언어에서 제한하는 요소들을 적극적으로 따라 통일성을 부여하는 노력이 필요할 것으로 보입니다.\n\n@staticmethod와 @classmethod의 활용법에 대한 여러분들의 의견도 궁금합니다. 파이썬에서 @staticmethod의 필요성에 대해 이야기 해주실 분들은 덧글로 소통해주시면 감사하겠습니다.\n\n\n## 검색한 문서\n\n- [파이썬 정적(static) 메서드와 클래스(class) 메서드 | Engineering Blog by Dale Seo](https://www.daleseo.com/python-class-methods-vs-static-methods/)\n- [The definitive guide on how to use static, class or abstract methods in Python](https://julien.danjou.info/guide-python-static-class-abstract-methods/)\n- [정적 메소드를 쓰는 이유가 무엇인가요? | 코드잇](https://www.codeit.kr/community/threads/13116)"},{"excerpt":"들어가며 개발하며 이런 식의 표현을 보았습니다.\n\n이런 식의 표현은 함수를 정의하면서 keyword argment 자리를 표현할때 종종 사용하고는 했습니다.\n근데 정의할 때가 아니라 사용할 때 이런식으로 쓰면 어떻게 되는건지 궁금해졌습니다. 그냥 넣는거랑 **을 붙이는거랑 무슨 차이가 나는걸까요? 데이터를 Unpacking 하는 용도로 쓰인다고 합니다. …","fields":{"slug":"/python-asterisk/"},"frontmatter":{"date":"February 11, 2022","title":"파이썬 class(**external_data)이 뭘까?","tags":["python","작성중"]},"rawMarkdownBody":"\n## 들어가며\n개발하며 이런 식의 표현을 보았습니다.\n![image](78927256-9DF9-47FB-A80F-6A3660F2F549.png)\n이런 식의 표현은 함수를 정의하면서 keyword argment 자리를 표현할때 종종 사용하고는 했습니다.\n근데 정의할 때가 아니라 사용할 때 이런식으로 쓰면 어떻게 되는건지 궁금해졌습니다. 그냥 넣는거랑 **을 붙이는거랑 무슨 차이가 나는걸까요?\n\n\n데이터를 Unpacking 하는 용도로 쓰인다고 합니다.\n\n## 데이터 언패킹 사용예시\nUser 에서 id, signup_ts, friends 를 keyword argument 로 받는 경우,\nDictionary 타입으로 정의된 객체를 그대로 인자로 전달하고 싶을 때 사용하면 좋습니다.\n\n\n## Python의 Asterisk(*) 사용 예시 알아보기\n- [파이썬의 Asterisk(*) 이해하기 · mingrammer’s note](https://mingrammer.com/understanding-the-asterisk-of-python/)\n- [5 Uses of Asterisks in Python. The powerful weapon for writing more… | by Yang Zhou | TechToFreedom | Medium](https://medium.com/techtofreedom/5-uses-of-asterisks-in-python-3007911c198f)\n\n"},{"excerpt":"들어가며 파이썬 공부를 하며 \"...\"이라는 표현을 보게 되었습니다. 처음에는 그냥 말 줄임표로 쓴 줄 알았는데 실제 코드에서 \"...\"이 나타나는 것을 보고 뭔가 표현식이 있겠거나 하고 넘겼습니다. 대부분의 예제에서 pass 대신 사용하고 있었기 때문에 단순히 pass의 또 다른 형태인 줄 알았는데 Fast API에서 등장한 \"...\"을 보며 궁금증이 …","fields":{"slug":"/python-ellipsis/"},"frontmatter":{"date":"February 11, 2022","title":"파이썬 “…” 표현식이 이 뭘까?","tags":["python","작성중"]},"rawMarkdownBody":"\n## 들어가며\n파이썬 공부를 하며 \"...\"이라는 표현을 보게 되었습니다. 처음에는 그냥 말 줄임표로 쓴 줄 알았는데 실제 코드에서 \"...\"이 나타나는 것을 보고 뭔가 표현식이 있겠거나 하고 넘겼습니다.\n\n대부분의 예제에서 pass 대신 사용하고 있었기 때문에 단순히 pass의 또 다른 형태인 줄 알았는데 Fast API에서 등장한 \"...\"을 보며 궁금증이 생겼습니다.\n\n이 단순한 궁금증은 검색 실패로 커져갔습니다. 구글에 Python ... 이라고 검색하면 온갖 파이썬 관련 문서가 검색됩니다. 여러번 검색하다보니 오기가 생겨서 몇번 검색을 시도하다가 Python three dots 라는 키워드로 검색에 성공하였습니다.\n\nPython Ellipsis에 대해 알게 된 것을 적어봅니다.\n\n\n## Python Ellipsis가 무엇일까?\n\n### numpy에서 활용\n\n\n### 객체에서 활용\n\n\n### pass 대신 사용\n\n\n## 검색한 문서\n- [파이썬 세 개의 점, Ellipsis 객체는 무엇인가요? | MADTECH](https://tech.madup.com/python-ellipsis/)\n- [Three Dots in Python, What is the Ellipsis Object? | PäksTech](https://pakstech.com/blog/python-ellipsis/)\n- [3 Uses of the Ellipsis in Python. The cutest syntax sugar in Python | by Yang Zhou | TechToFreedom | Medium](https://medium.com/techtofreedom/3-uses-of-the-ellipsis-in-python-25795aac723d)\n- [Built-in Constants — Python 3.10.2 documentation](https://docs.python.org/3/library/constants.html#Ellipsis)\n"},{"excerpt":"왜 연결시에는 3-way 이고 연결 종료시에는 4-way인지 궁금해짐 들어가며 TCP통신을 위해 3-way Handshake가 필요하다는 것은 알게 되었습니다. 전이중 통신을 지향하기 때문에 양 측 모두 데이터를 송수신할 준비가 되었다는 것을 검증받기 위해 송수신 모두 문제가 없음을 검증하기 위해서 3-way 절차가 필요합니다. 근데, 4-way 는 왜 …","fields":{"slug":"/tcp-4way-handshake/"},"frontmatter":{"date":"February 11, 2022","title":"TCP에서 연결 종료시 4-way Handshake가 필요한 이유","tags":["network","tcp","작성중"]},"rawMarkdownBody":"\n- 왜 연결시에는 3-way 이고 연결 종료시에는 4-way인지 궁금해짐\n\n\n## 들어가며\n\nTCP통신을 위해 3-way Handshake가 필요하다는 것은 알게 되었습니다. 전이중 통신을 지향하기 때문에 양 측 모두 데이터를 송수신할 준비가 되었다는 것을 검증받기 위해 송수신 모두 문제가 없음을 검증하기 위해서 3-way 절차가 필요합니다.\n\n근데, 4-way 는 왜 나온걸까요? 종료시에도 3-way로 하면 똑같이 검증할 수 있는 것이 아닐까요?\n단순히 종료할떄는 4-way이다 라고 알고 넘어갔는데 계속 궁금증이 남아 찾아보았습니다.\n\nTCP의 Handshake에 대해서는 너무나 많은 글이 있습니다. 연결 과정에 대해서는 자세히 적지 않으려 합니다.\n\n## 4-way Handshake가 일어나는 과정\n\n\n\n## 왜 4-way가 필요한가?\n\n\n\n## 참고자료\n- [TCP Connection Termination - GeeksforGeeks](https://www.geeksforgeeks.org/tcp-connection-termination/)\n- [Network 3-way Handshake & 4-way Handshake](https://it-mesung.tistory.com/166)"},{"excerpt":"내가 만들고 싶은 것이 아니라\n사람들이 원하는 것을 만들어라 창업을 하거나 제품을 만들 때 유의할 점으로 많이 듣는 말입니다.\n우리가 만들고 싶은 것이 아니라 제품을 사용할 사용자가 원하는 것을 만드는 것이 중요합니다.\n제품의 담당자로서 이 질문에 답을 했는지, 제품을 만드는 조직 전체가 이 질문에 답을 할 수 있는지, 더 나아가 회사가 이 질문에 답을 …","fields":{"slug":"/프로덕트-필수-질문/"},"frontmatter":{"date":"February 11, 2022","title":"제품을 개발하는 조직에서 항상 가져가야 하는 질문","tags":["조직","프로덕트","독서"]},"rawMarkdownBody":"\n> 내가 만들고 싶은 것이 아니라\n> 사람들이 원하는 것을 만들어라\n\n창업을 하거나 제품을 만들 때 유의할 점으로 많이 듣는 말입니다.\n우리가 만들고 싶은 것이 아니라 제품을 사용할 사용자가 원하는 것을 만드는 것이 중요합니다.\n제품의 담당자로서 이 질문에 답을 했는지, 제품을 만드는 조직 전체가 이 질문에 답을 할 수 있는지, 더 나아가 회사가 이 질문에 답을 할 수 있는지 항상 고민하고 점검해야 합니다.\n\n\n## 제품을 만들 때 항상 가져야 하는 의문\n1. 고객이 과연 이 제품을 구매하거나 사용할까?\n2. 사용자가 이 제품의 사용법을 잘 알고 잘 쓸까?\n3. 우리 사업에 효과가 있는 솔루션인가?\n\t1. 문제를 해결하는가?\n4. 우리가 적절한 때에 만들어 전달 할 수 있는가? (실현 가능성)\n\n\n## 모든 일에 모든 구성원이 이 질문에 답할 수 있도록 만들기\n\n### 이 일은 어떤 사업 목표를 다루는 것인가? (목표)\n- 이 기능을 만드는 것이 우리 회사 전체 사업 목표중 어떤 것에 도움이 되는가 고민합니다.\n- 우리 회사의 지금 로드맵상에 목표가 무엇인지도 알고 있어야 합니다.\n- 최신 기술과 좋은 성능이 주 목표가 되지 않을 수 있습니다.\n\n### 성공을 어떤 기준으로, 어떻게 판단할 수 있는가? (핵심성과)\n- 우리가 만드는 기능이 성공적으로 사용되고 있는지를 어떻게 판단할지 고민합니다.\n- 사용자는 좋은 지표이지만 단순히 많이 쓰는 것이 중요하지 않을 수 있습니다.\n\t- 우리의 제품에 맞는 지표와 기준을 정해야 합니다.\n\n### 우리의 고객을 위해 어떤 문제를 해결하는 것인가? (고객 문제)\n- 모든 기능과 제품은 문제를 해결해야 합니다.\n- 고객이 겪는 어느 문제를 대신 해결해주는지 고민해야 합니다.\n\n### 우리가 집중하고 있는 고객은 누구인가? (목표시장)\n- 우리가 만드는 제품을 전 세계 모든 사람이 쓰면 좋겠지만 절대 그렇지 않습니다.\n- 우리가 만든 제품을 쓰는 고객이 정확히 누구인지 알고 있어야 합니다.\n\n\n*인스파이어드 책에서…*\n"},{"excerpt":"들어가며 Fast API를 통해 개발중에 상속과 오버라이드를 해야 할 일이 있었습니다.\n린팅을 위해 mypy로 검사해보니 이런 오류를 내어 주었습니다. 단순히 메소드를 오버라이드 해서 생긴 문제라고 생각하기에는 다른 곳에서 동일한 방법으로 오버라이드한 메소드에서는 에러가 발생하지 않았습니다. 자세히 살펴보니 상속 과정에서 작동하는 오버라이드와 작동하지 않…","fields":{"slug":"/mypy-clean-architecture-lsp/"},"frontmatter":{"date":"February 09, 2022","title":"Python incompatible with supertype 에러와 LSP","tags":["아키텍쳐","mypy","fast api"]},"rawMarkdownBody":"\n\n## 들어가며\nFast API를 통해 개발중에 상속과 오버라이드를 해야 할 일이 있었습니다.\n린팅을 위해 mypy로 검사해보니 이런 오류를 내어 주었습니다.\n\n```\nSignature of \"create\" incompatible with supertype\n```\n\n단순히 메소드를 오버라이드 해서 생긴 문제라고 생각하기에는 다른 곳에서 동일한 방법으로 오버라이드한 메소드에서는 에러가 발생하지 않았습니다.\n\n자세히 살펴보니 상속 과정에서 작동하는 오버라이드와 작동하지 않는 오버라이드의 다른점이 있었습니다.\n작동하는 것은 슈퍼 클래스에서 정의한 인자의 형태를 그대로 사용하였으나, 작동하지 않는 것은 슈퍼 클래스에서 정의한 인자 이외의 하나를 추가하였습니다.\n\n왜 그럴까 궁금증이 생겨 문서를 찾아보게 되었습니다.\n\n\n## 왜 에러가 나왔는가?\nmypy 공식 문서에 보면 Liskov substitution principle에 위배되는 행위는 안된다고 합니다. 무엇인지 몰라 예시를 먼저 보았습니다.\n\n``` python\n\nfrom typing import Sequence, List, Iterable\n\nclass A:\n    def test(self, t: Sequence[int]) -> Sequence[str]:\n        ...\n\nclass GeneralizedArgument(A):\n    # A more general argument type is okay\n    def test(self, t: Iterable[int]) -> Sequence[str]:  # OK\n        ...\n\nclass NarrowerArgument(A):\n    # A more specific argument type isn't accepted\n    def test(self, t: List[int]) -> Sequence[str]:  # Error\n        ...\n\nclass NarrowerReturn(A):\n    # A more specific return type is fine\n    def test(self, t: Sequence[int]) -> List[str]:  # OK\n        ...\n\nclass GeneralizedReturn(A):\n    # A more general return type is an error\n    def test(self, t: Sequence[int]) -> Iterable[str]:  # Error\n        ...\n\n```\n\n예시를 보니 무언가 감이 잡혔습니다.\n- 인자로는, 부모 클래스에서 정의한 것보다 더 세부적인 것을 정의할 수 없다.\n- 반환값으로는, 부모 클래스에서 정의한 것 보다 더 제너럴하게 정의할 수 없다.\n\n아직 직관적으로 이해가 되지는 않았습니다. ‘부모에서는 추상적으로 설계하고 자식이 디테일하게 설계하는게 맞지 않나?’ 라는 생각이 들었습니다.\n\n\n## Liskov substitution principle\n> 확장에 대해서는 열려 있어야 하고, 변경에 대해서는 닫혀 있어야 한다.\n\n클린 아키텍쳐에서 설명하는 주요 원칙중 하나입니다. 각 객체들을 사용하는 것은 개발자간의 약속입니다. 상속받은 객체들 역시 같은 메소드에서는 같은 역할을 해야 합니다.\n추상화된 부모 클래스의 제약조건을 따라 개발하면, 그것을 상속받아 구체화되어 구현된 것들을 그대로 사용할 수 있어야 합니다.\n\n맞는 예시인지는 모르겠습니다만, SQLAlchemy를 쓸때 어떤 db를 사용하는지에 따라 내부 로직은 변화가 있겠지만 실제로 사용하는 개발자 입장에서는 추상화된 조건에 맞추어 사용하기만 하면 되는 것과 유사합니다. SQLAlchemy 에서 새로운 db를 지원하게 되었다고 해서 사용법이 달라지지 않게 하기 위해서는 LSP가 지켜져야 합니다.\n\n\n### 내 코드의 문제점\n아래는 저의 문제가 되는 코드입니다.\n\n부모 클래스의 메소드 정의\n```python\n...\ndef create(self, db: Session, *, obj_in: CreateSchemaType) -> ModelType:\n        ...\n...\n```\n\n에러난 자식 클래스의 메소드 정의\n```python\n...\n def create(\n        self, db: Session, *, obj_in: ScheduleBlockCreate, user_id: str\n    ) -> ScheduleBlock:\n        ...\n\n...\n````\n\n\n저희 코드에서 예시를 보면, 유저를 생성할때 전달해야 하는 인자는 유저 dto인데, 타임테이블을 생성할때는 타임테이블의 dto에 더해 유저 아이디를 따로 전달해야 하는 형태로 구현되어있었습니다.\n\n이렇게 적고 다시 보니 제 코드가 이상하게 구현된 것이 맞습니다.\n\n개발 과정에서는 당연히 다른 객체를 생성하니까 메소드의 형태가 다를 수 있다고 생각한 모양입니다. \n하지만, 특정 모델을 db에 생성하는 로직에서 특정 dto만 받기로 추상화되어 약속되어 있었는데 갑자기 다른 것을 달라고 하면 해당 메소드를 이용하는 개발자들은 헷갈릴 것입니다. 지금이야 저 혼자 개발하고 있지만 나중에 저는 고통받을 것이 뻔합니다.\n\n이런 관점에서, 반환하는 값에 대해서도 제한을 둔 LSP 철학이 이해가 되었습니다. 원래 생성한 이후에는 db에서 생성된 값을 dto 형식대로 반환해주기로 약속되어 있었습니다. 그런데 어떤 엔티티 형식에서는 뜬금없이 다른 형태로 반환해준다면 개발자는 별도 로직을 구현해야 할 것입니다.\n\n\n## 해결하기\n공식 문서에서는 타입 보장이 크게 필요없다면  `# type: ignore[override]` 를 통해 에러를 없앨 수 있다고 힙니다.\n다만 LSP에 대해서 알게 되었으니 LSP를 지키도록 아키텍쳐를 변경하고자 고민했습니다.\n\n지금 코드의 문제는, timetable을 생성하기 위해 사용하는 dto 외의 다른 값을 받아야 한다는 것이였습니다.\n\n**해결방법 후보**\n1. 슈퍼 클래스에서 사용하는 타입에 맞도록 데이터 타입 스키마를 수정하기\n2. 메소드를 무리하게 상속받지 않고 새로 만들어 사용하기\n\ndto 형식을 수정하는 것이 옳다고 생각했습니다. Timetable을 생성하기 위해서는 user_id가 필요하니 Timetable을 생성하기 위한 dto에 user_id를 포함하면 메소드를 상속받지 않아도 됩니다. \n문제는, 제가 개발해야 하는 타임테이블 생성 api는 user_id를 body로 받지 않고 비즈니스 로직단에서 입력해야 한다는 점이였습니다. \n\nFast API에서는 정의한 dto 스키마대로 api 명세와 문서를 자동으로 정의해줍니다. dto를 수정하면 API 명세가 바뀌기 떄문에 일단 메소드명을 수정하기로 했습니다. 결국 Api Endpoint를 개발하는 코드와 종속성이 생길 가능성이 생겼습니다. 클린 아키텍쳐를 지키기 위해 클린 아키텍쳐를 위반할 여지를 남겨두게 되었습니다.\n\n이렇게 개발하고 보니 전반적인 아키텍쳐가 잘못 설계된 점이 많다는 것을 느꼈습니다. 모를때는 편했는데 알게 되니 코드가 마음에 들지 않습니다. 처음부터 알았으면 좋았을텐데 구현에 집중하다보니 놓친 부분이였습니다.\n\n요즘 클린 아키텍쳐에 대한 필요성을 몸소 느끼고 있습니다. 전에 공부할때는 한번 쓱 훑고 넘겼는데 이제서야 머리에 쏙쏙 들어옵니다.\n\n모르는 것이 생겼다는 슬픔은 새롭게 알게되었다는 기쁨으로 넘기고 공부해야겠습니다.\n\n## 참고자료\n- [Common issues and solutions — Mypy 0.931 documentation](https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides)\n- [oop - What is an example of the Liskov Substitution Principle? - Stack Overflow](https://stackoverflow.com/questions/56860/what-is-an-example-of-the-liskov-substitution-principle)"},{"excerpt":"이 글은 지속적으로 작성되며 업데이트 되는 글입니다. 지금은 별다른 내용이 없을 수 있는 점 양해 부탁드립니다. 배경 Fast API를 프로젝트에 무작정 써보기 위해 Fast API 개발자님이 만들어 주신 보일러플레이트를 이용했습니다.\n구조를 단순히 따라가는 것으로도 공부가 되는 기분이 들었습니다. 다만 처음부터 해봐야 공부가 되는 것들도 이미 세팅이 되…","fields":{"slug":"/docker-ec2-CD-github-actions/"},"frontmatter":{"date":"February 04, 2022","title":"Github Actions를 이용해 Docker CD 도전기","tags":["ec2","github","CD","Docker","til","작성중"]},"rawMarkdownBody":"\n\n> 이 글은 지속적으로 작성되며 업데이트 되는 글입니다. 지금은 별다른 내용이 없을 수 있는 점 양해 부탁드립니다.\n\n## 배경\nFast API를 프로젝트에 무작정 써보기 위해 Fast API 개발자님이 만들어 주신 보일러플레이트를 이용했습니다.\n구조를 단순히 따라가는 것으로도 공부가 되는 기분이 들었습니다. 다만 처음부터 해봐야 공부가 되는 것들도 이미 세팅이 되어있었기 때문에 따로 공부를 해야 한다는 생각을 하고 있습니다.\n\n배포와 관련해서 Docker를 써보고 싶었는데, 이미 제가 사용한 보일러플레이트에는 실행 가능하도록 dockerfile과 docker-compose 파일이 세팅 되어있었습니다. 덕분에 처음부터 개발 환경 세팅에 시간을 쓸 것 없이 편하게 비즈니스 로직 개발을 진행할 수 있었습니다.\n\n배포에 즈음하여 고민했습니다. 도커를 쓰고 있지만 아직 배포시에는 도커의 순기능을 활용하지 못하고 있었습니다. 다른 팀에서는 개발자분들이 이미 세팅해주셨기 때문에 Github에 merge만 해도 배포가 되었었는데 그것이 참 그리웠습니다.\n\n도커라이징도 되어있겠다 Github Actions를 이용하여 CD를 구성해보며 이 글을 작성합니다.\n\n\n## 접근 방법\n우선 Github Actions는 어깨너머로 본 경험이 있었기에 기본적인 구조는 알고 있었습니다. \n깃허브 도커 이미지 EC2 배포하기와 관련해 리서치를 통해 다음과 같은 방식으로 진행된다고 이해했습니다.\n\n\n\n**배포 액션 계획**\n1. develop에 merge 또는 push 된 경우\n2. 코드 체크 스크립트 실행 (Type check, Testing)\n3. 도커 이미지 파일 빌드\n4. 깃허브 패키지에 업로드\n5. EC2에 뭔가 명령어 실행\n\n\n### 막힌 점\n1. 깃헙에서 도커 이미지를 빌드해서 특정 저장소에 등록하는 것 까지는 이해함. 근데 ec2에서 해당 도커 파일을 받는 것은 어떤 액션을 통해 진행되는 걸까?\n\t1. Github actions에 runnners라고 하는 무언가가 있음.\n\t2. 우리가 주로 쓰는 방식은 Github에서 자체 호스팅 해주는 runner에서 빌드하는 방식임\n\t3. self-hosted runner 방식을 이용해서 내 ec2에서 코드가 실행될 수 있도록 하는 방식으로 진행하면 됨\n\n\n## 참고자료\n- [Vue 프로젝트 Github Action & Docker 이용해서 EC2에 배포하기 -- 1](https://velog.io/@zlemzlem5656/Vue-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-Github-Action-Docker-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0)\n- [Github Actions으로 AWS EC2에 CI/CD 구축하기](https://velog.io/@soosungp33/Github-Actions%EC%9C%BC%EB%A1%9C-AWS-EC2%EC%97%90-CICD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0)\n- [Github Actions Self-hosted 공식문서](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners)"},{"excerpt":"들어가며 사람은 항상 성장하려고 한다. 1년 전에는 잘 못했던 것을 지금 해내고 있는 자신을 볼 때가 있다. 지식은 단순히 수학공식이나 영어단어 같은 것을 말하지 않는다. 지식은 협상하기, 눈치보기, 회의 이끌기 같은 행동 양식과, 더 나아가서 본인 감정상태 다스리기, 진심으로 위로하기 같은 엄청나게 추상적인 암묵지도 포함한다. 나는 어떻게 성장했는가? …","fields":{"slug":"/성장의-단계/"},"frontmatter":{"date":"February 02, 2022","title":"성장의 단계","tags":["생각","짧은글","초안","성장"]},"rawMarkdownBody":"\n\n## 들어가며\n사람은 항상 성장하려고 한다. 1년 전에는 잘 못했던 것을 지금 해내고 있는 자신을 볼 때가 있다.\n\n지식은 단순히 수학공식이나 영어단어 같은 것을 말하지 않는다. 지식은 협상하기, 눈치보기, 회의 이끌기 같은 행동 양식과, 더 나아가서 본인 감정상태 다스리기, 진심으로 위로하기 같은 엄청나게 추상적인 암묵지도 포함한다.\n\n나는 어떻게 성장했는가? 사람은 어떻게 성장하는가? 성장의 단계에 대한 고찰을 공유해본다.\n\n## 성장의 단계\n- 모를 수 있다는 것을 인정하는 단계\n\t- 내가 모를수도 있다는 것을 인정해야 \"성장\"이라는 개념을 생각할 수 있다.\n\t- 나는 당연히 모든 것을 안다고 생각하는 사람에게 성장은 없다.\n- 모르는 것을 아는 단계\n\t- 내가 실제로 특정 지식을 모른다는 것을 아는 것이다. 무엇을 모르는지 알아야 성장할 수 있다.\n- 아는 방법을 배우는 단계\n\t- 내가 모르는 것을 어떻게 배워나갈지 아는 것이 중요하다. 내가 배울 지식이 책상에서 시간을 많이 쓰는 것일수도 있고, 체험과 도전으로 배워나가야 하는 지식, 사람을 만나야 하는 지식일 수 있다.\n- 지식을 아는 단계\n\t- 지식을 쌓아나가는 단계이다. 이 단계에서는 \"아는 척\"할 수 있다. 하지만 아직 쌓아둔 지식을 써먹어 본 적은 없다.\n- 지식을 실천하는 단계\n\t- 내가 아는 지식을 실제로 행동에 옮기는 상태이다. 이 단계에서 남들이 나를 보며 진짜 성장했다는 것을 느끼게 된다.\n\t- 이 단계에서 지식이 체화되기도 한다. 의도하지 않아도 모든 행동에서 내가 배우고 익힌 지식이 드러난다. 별다른 노력 없이도 지식을 써먹게 된다.\n- 지식을 전달하는 단계\n\t- 지식을 실천하다 보면 성장하면 내가 배운 경험을 남에게 전달할 수 있게 된다.\n- 지식을 실천하도록 하는 단계\n\t- 남이 내가 경험한 성장을 따라오게 하는 단계이다.\n\t- 모범\n\t\t- 모범이 필요하다. 내가 지식을 실천하지 않는데 남이 지식을 실천하기를 기대해서는 안 된다.\n\t- 본인 학습 방식에 대한, 타인 학습 단계 멘탈모델에 대한 인지\n\t\t- 상대방이 이 지식을 모를 때 어떤 눈높이에서 사고하는지 알아야 한다.\n\t\t- 내가 이 지식을 모를 때 어떻게 행동했는지, 나는 어떻게 이 지식을 얻고 체화하게 되었는지를 알아야 한다."},{"excerpt":"피드백이 자유로운 문화를 만들기 위해 실리콘밸리 조직문화가 유명해지며 솔직한 피드백을 통한 성장이 주요한 조직 성장 동력으로 주목받고 있다. 눈치보며 할 말 못하는 문화에 지겨운 요즘 사람들에게 아주 새롭고 신선한 시도록 보여지고 있다. 피드백이 있을때 숨김 없이 말할 수 있는 분위기를 만드는 것은 업무에 상당히 도움이 된다. 눈치보지 않고 드러난 일에만…","fields":{"slug":"/feedback-4a/"},"frontmatter":{"date":"February 01, 2022","title":"자유로운 피드백을 위한 원칙","tags":["조직","스크랩","독서"]},"rawMarkdownBody":"\n## 피드백이 자유로운 문화를 만들기 위해\n실리콘밸리 조직문화가 유명해지며 솔직한 피드백을 통한 성장이 주요한 조직 성장 동력으로 주목받고 있다. 눈치보며 할 말 못하는 문화에 지겨운 요즘 사람들에게 아주 새롭고 신선한 시도록 보여지고 있다.\n\n피드백이 있을때 숨김 없이 말할 수 있는 분위기를 만드는 것은 업무에 상당히 도움이 된다. 눈치보지 않고 드러난 일에만 집중할 수 있기 때문이다.\n\n하지만 고민없는 솔직한 피드백 문화 떄문에 가끔 어색한 광경을 목격하게 된다.\n기분 나쁜 피드백을 기분 나쁘게 듣지 말라는 식의 태도로는 서로 좋지 않은 효과만 불러일으킨다.\n\n피드백이 조직에 들어오기 위해서는 상상 이상의 노력과 훈련이 필요하다.\n미국인들의 문화가 원래 개방적이라 피드백이 통하는 것이 아니다. 그들도 수 많은 노력과 연구, 훈련이 뒷받침 되어있기 때문에 솔직한 피드백이 잘 작동할 수 있는 것이다.\n\n피드백은 원래 아프다는 사실까지는 모두가 안다. 그렇기에 조직의 성장 동력이 될 수 있는 것이다. 하지만 이 의미는 원래 아프니까 아파하는 사람에게 대고 마구 휘둘러도 된다는 것이 아니다. 피드백이 조직의 성장 동력이 되기 위해서는 \"피드백\"이 가진 기본 성질과 피드백을 하는 이유를 잊지 말고 잘 다루어야 한다.\n\n\n## 넷플릭스의 4A 피드백 문화 스크랩한 내용\n\n### 도움을 주겠다는 생각으로 하라\n1. 불만을 표현하거나 상처를 주기 위해 말하는 솔직함은 절대 안 된다.\n2. 구체적으로 상대방에게 어떤 도움이 되는지를 납득시켜야 한다.\n3. 이 피드백이 내가 아니라 상대방에게 도움이 된다는 사실을 신경써서 말해라.\n\n### 실질적인 조치를 포함하라\n1. 받는 사람이 행동에 어떻게 변화를 주어야 할지 정확히 말해라\n2. 잘못된 예) \"발표를 그렇게 하면 사람들이 아무도 안들을겁니다.\"\n3. 옳은 예) \"다른 팀 구성원이 있는 자리에서 발표할 때는 비전문가들 관점에서 사례를 들어가며 설명하면 다른 팀 분들에게도 의도가 잘 전달될 겁니다.\"\n\n### 감사하라\n1. 사람은 비판을 받으면 본능적으로 방어하게 된다. 방어적인 마음이 드는 것이 잘못된 것이 아니다.\n2. 다만, 피드백 문화를 만들이 위해 조직 구성원들이 방어하지 않는 연습을 의도적으로 해야 한다.\n3. 어떻게 해야 상대방의 의견을 신중하게 듣고 감사할 수 있을까? 고민해야 한다.\n4. 상대방이 다시 부담없이 피드백을 할 수 있도록 표현해야 한다.\n\n### 받아들이거나 거부하라\n1. 피드백을 주는 입장에서나 받는 입장에서나 피드백의 적용은 받는 사람의 선택에 달렸다는 것을 이해해야 한다.\n2. 피드백을 준 사람으로서는 “왜 내가 피드백 했는데 안들어줘?”라고 생각해서는 안 된다. 피드백의 수용은 받은 사람이 결정한다. 피드백을 거절한 것은 나를 거절한 것이 아니다. 가장 상황을 잘 아는 사람이 속도에 맞추어 적용할 것이다.\n3. 반대로 피드백을 받아들인 사람으로서는 “쟤는 왜 내가 결정할 사항에 이래라 저래라야?” 하는 마음이 들면 안된다. 피드백을 주는 사람이 더 거리낌 없이 줄 수 있도록 해야 한다.\n\n(규칙없음 중에서)"},{"excerpt":"안녕하세요 블로그를 새롭게 세팅해보았습니다. 기술적인 내용이나 개인의 짧은 메모라도 가볍게 공유할 수 있는 블로그로 활용할 예정입니다.","fields":{"slug":"/hello-world/"},"frontmatter":{"date":"February 01, 2022","title":"안녕하세요.","tags":["짧은글"]},"rawMarkdownBody":"\n## 안녕하세요\n\n블로그를 새롭게 세팅해보았습니다.\n\n기술적인 내용이나 개인의 짧은 메모라도 가볍게 공유할 수 있는 블로그로 활용할 예정입니다."},{"excerpt":"이 글은 지속적으로 작성되며 업데이트 되는 글입니다. 지금은 별다른 내용이 없을 수 있는 점 양해 부탁드립니다. 배경 사이드 프로젝트로 개발중인 API서버를 슬슬 배포해보고자 합니다. 프론트앤드와 백앤드를 따로, 다른시간에 개발하다 보니 항상 띄워져 있을 개발 서버의 필요성을 느끼게 되었습니다. 이왕 하는김에 도메인까지 구매해서 개발서버로 사용해보면 어떨…","fields":{"slug":"/https-with-aws-elb/"},"frontmatter":{"date":"February 01, 2022","title":"AWS EC2에 배포된 서버 HTTPS 통신 적용하기","tags":["AWS","EC2","SSL","til","작성중"]},"rawMarkdownBody":"\n> 이 글은 지속적으로 작성되며 업데이트 되는 글입니다. 지금은 별다른 내용이 없을 수 있는 점 양해 부탁드립니다.\n\n## 배경\n\n사이드 프로젝트로 개발중인 API서버를 슬슬 배포해보고자 합니다. 프론트앤드와 백앤드를 따로, 다른시간에 개발하다 보니 항상 띄워져 있을 개발 서버의 필요성을 느끼게 되었습니다. 이왕 하는김에 도메인까지 구매해서 개발서버로 사용해보면 어떨까 생각이 들었습니다.\n\n더욱 이왕 하는 김에 SSL까지 적용하여 실제 서비스 환경과 동일하게 개발을 진행하려고 합니다.\n방법을 조금 찾아보니 대부분의 문서에서 AWS 내부에서 도메인 구매부터 모든 것을 진행하는 방법이 소개되고 있었습니다. 저희는 도메인은 AWS가 아닌 다른 곳에서 구매하였는데 이 과정에서 진행한 경험을 공유해봅니다.\n\n- 외부에서 구매한 도메인을 보유함\n- 서버에서 SSL을 직접 적용하고 싶지는 않음\n\n\n## 적용 과정\n### 도메인 구매 & Cloudfront로 관리하도록 세팅\n\n\n### AWS 네임서버 등록\n\n### AWS 인증서 발급 신청\n\n### 타겟 그룹 설정\n여기서 영역 설정을 잘못 해서 한참 고생함.\n\n### Application Loadbalncer 세팅\n여기서 인증서 적용함\n\n\n## 배운 점\n"},{"excerpt":"미래에는 어떤 역량이 중요해질까? \"교육의 목적이 무엇인가?\" 라는 질문에 한참 빠져 있었다. 우리가 열심히 공부하는 긍국적인 이유는 무엇일지 알아야 몰입할 수 있다.\n지금 우리가 배우는 지식과 지금 우리가 익히는 역량은 진짜 필요한 역량일까? 스타트업 활동을 하며 생각난 미래에 필요한 역량을 메모해두었는데 이 자리에서 공유해본다. 미래 핵심 역량 제목을…","fields":{"slug":"/미래-핵심-역량/"},"frontmatter":{"date":"February 01, 2022","title":"미래 핵심 역량","tags":["생각","짧은글","초안"]},"rawMarkdownBody":"\n## 미래에는 어떤 역량이 중요해질까?\n\"교육의 목적이 무엇인가?\" 라는 질문에 한참 빠져 있었다. 우리가 열심히 공부하는 긍국적인 이유는 무엇일지 알아야 몰입할 수 있다.\n지금 우리가 배우는 지식과 지금 우리가 익히는 역량은 진짜 필요한 역량일까?\n\n스타트업 활동을 하며 생각난 미래에 필요한 역량을 메모해두었는데 이 자리에서 공유해본다.\n\n## 미래 핵심 역량\n\n### 제목을 작성하는 역량\n제목을 작성하기 위해서는 다양한 지식을 종합해 위에서 보는 역량이 있어야 한다. 남들이 보았을 때 어떤 내용이 있을지 한번에 알기 위해서는 제목이 중요하다. 좋은 제목을 작성하는 능력은 다른 사람의 사고방식과 현 시대의 페러다임을 이해하고 있어야 가질 수 있다.\n제목을 작성한다는 것은 주어진 정보들을 분류할 적절한 기준을 만들고, 스스로 만든 기준에 맞추어 분류할 수 있어야 한다.\n\n### 썰을 푸는 역량\n자신이 가진 지식을 남들과 함께 나누고 협력하는 것이 중요한 시대이다. 정보가 넘쳐다는 시대에 남들이 자신의 말을 듣게 하는 능력을 가져야 한다. 같은 내용이라도 몰입해서 듣게 만드는 역량이 주요 역량이 될 것이다.\n\n### 이해시키는 역량\n내가 가진 지식을 다른 사람에게 이해시키는 능력이다. 썰을 푸는 능력은 몰입시키는 능력이라면, 이해시키는 능력은 상대방이 나와 생각이 일치하도록 정보를 정확히 전달시키는 능력이다. 모두가 동일한 방식으로 이해하지 않는다. 상대방의 반응과 이해 정도를 실시간으로 파악하여 그에 맞는 방식으로 정보를 전달할 수 있어야 한다.\n\n### 다른 사람이 말하게 만드는 역량\n내 생각을 집중되도록 말하는 능력 못지 않게 남이 편하게 말하게 하는 능력도 중요하다. 상대방의 관심사와 상태를 캐치하여 다른 사람이 가진 생각과 정보를 공유하게 해주는 능력이야 말로 중요한 역량이다. 혼자 떠드는 것으로는 협력할 수 없다. 모두가 썰을 푸는 능력을 가지지 못했더라도 내 앞에서는 '썰을 푸는 능력'을 가질 수 있게 해주는 역량을 길러야 한다.\n\n### 메타인지\n내가 학습하기 위해서는 내가 무엇을 모르는지, 내 상태가 어떤 상태인지 인지할 필요가 있다. 내가 무엇을 모르는지를 넘어서 특정 분야에서 가장 최고 수준이 어느정도인지, 보통 수준이 어느정도인지, 내 위치는 어디인지, 나보다 못하는 수준의 사람들은 어떤 사고방식을 가지고 있는지 아는 것이 진정한 메타인지이다.\n\n### 검색 역량\n내가 모르는 지식을 가장 빠르게 얻는 능력이다. 검색 능력은 단순히 인터넷 검색만을 말하지 않는다. 얕게 알고 있는 지식들을 종합하여 내가 원하는 지식에 **스스로 접근**하는 전략을 세우는 능력이다. 이제는 지식을 누군가 정리하여 알려주지 않는다. 스스로 무엇을 모르는지 파악하고, 필요한 것을 판단하여 지식에  접근하는 역량이 필요하다."}]}},"pageContext":{}},"staticQueryHashes":[]}