{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"들어가며 Fast API를 통해 개발중에 상속과 오버라이드를 해야 할 일이 있었습니다.\n린팅을 위해 mypy로 검사해보니 이런 오류를 내어 주었습니다. 단순히 메소드를 오버라이드 해서 생긴 문제라고 생각하기에는 다른 곳에서 동일한 방법으로 오버라이드한 메소드에서는 에러가 발생하지 않았습니다. 자세히 살펴보니 상속 과정에서 작동하는 오버라이드와 작동하지 않…","fields":{"slug":"/mypy-clean-architecture-lsp/"},"frontmatter":{"date":"February 09, 2022","title":"Python incompatible with supertype 에러와 LSP","tags":["아키텍쳐","mypy","fast api"]},"rawMarkdownBody":"\n\n## 들어가며\nFast API를 통해 개발중에 상속과 오버라이드를 해야 할 일이 있었습니다.\n린팅을 위해 mypy로 검사해보니 이런 오류를 내어 주었습니다.\n\n```\nSignature of \"create\" incompatible with supertype\n```\n\n단순히 메소드를 오버라이드 해서 생긴 문제라고 생각하기에는 다른 곳에서 동일한 방법으로 오버라이드한 메소드에서는 에러가 발생하지 않았습니다.\n\n자세히 살펴보니 상속 과정에서 작동하는 오버라이드와 작동하지 않는 오버라이드의 다른점이 있었습니다.\n작동하는 것은 슈퍼 클래스에서 정의한 인자의 형태를 그대로 사용하였으나, 작동하지 않는 것은 슈퍼 클래스에서 정의한 인자 이외의 하나를 추가하였습니다.\n\n왜 그럴까 궁금증이 생겨 문서를 찾아보게 되었습니다.\n\n\n## 왜 에러가 나왔는가?\nmypy 공식 문서에 보면 Liskov substitution principle에 위배되는 행위는 안된다고 합니다. 무엇인지 몰라 예시를 먼저 보았습니다.\n\n``` python\n\nfrom typing import Sequence, List, Iterable\n\nclass A:\n    def test(self, t: Sequence[int]) -> Sequence[str]:\n        ...\n\nclass GeneralizedArgument(A):\n    # A more general argument type is okay\n    def test(self, t: Iterable[int]) -> Sequence[str]:  # OK\n        ...\n\nclass NarrowerArgument(A):\n    # A more specific argument type isn't accepted\n    def test(self, t: List[int]) -> Sequence[str]:  # Error\n        ...\n\nclass NarrowerReturn(A):\n    # A more specific return type is fine\n    def test(self, t: Sequence[int]) -> List[str]:  # OK\n        ...\n\nclass GeneralizedReturn(A):\n    # A more general return type is an error\n    def test(self, t: Sequence[int]) -> Iterable[str]:  # Error\n        ...\n\n```\n\n예시를 보니 무언가 감이 잡혔습니다.\n- 인자로는, 부모 클래스에서 정의한 것보다 더 세부적인 것을 정의할 수 없다.\n- 반환값으로는, 부모 클래스에서 정의한 것 보다 더 제너럴하게 정의할 수 없다.\n\n아직 직관적으로 이해가 되지는 않았습니다. ‘부모에서는 추상적으로 설계하고 자식이 디테일하게 설계하는게 맞지 않나?’ 라는 생각이 들었습니다.\n\n\n## Liskov substitution principle\n> 확장에 대해서는 열려 있어야 하고, 변경에 대해서는 닫혀 있어야 한다.\n\n클린 아키텍쳐에서 설명하는 주요 원칙중 하나입니다. 각 객체들을 사용하는 것은 개발자간의 약속입니다. 상속받은 객체들 역시 같은 메소드에서는 같은 역할을 해야 합니다.\n추상화된 부모 클래스의 제약조건을 따라 개발하면, 그것을 상속받아 구체화되어 구현된 것들을 그대로 사용할 수 있어야 합니다.\n\n맞는 예시인지는 모르겠습니다만, SQLAlchemy를 쓸때 어떤 db를 사용하는지에 따라 내부 로직은 변화가 있겠지만 실제로 사용하는 개발자 입장에서는 추상화된 조건에 맞추어 사용하기만 하면 되는 것과 유사합니다. SQLAlchemy 에서 새로운 db를 지원하게 되었다고 해서 사용법이 달라지지 않게 하기 위해서는 LSP가 지켜져야 합니다.\n\n\n### 내 코드의 문제점\n아래는 저의 문제가 되는 코드입니다.\n\n부모 클래스의 메소드 정의\n```python\n...\ndef create(self, db: Session, *, obj_in: CreateSchemaType) -> ModelType:\n        obj_in_data = jsonable_encoder(obj_in)\n        db_obj = self.model(**obj_in_data)  # type: ignore\n        db.add(db_obj)\n        db.commit()\n        db.refresh(db_obj)\n        return db_obj\n...\n```\n\n에러난 자식 클래스의 메소드 정의\n```python\n...\n def create(\n        self, db: Session, *, obj_in: ScheduleBlockCreate, user_id: str\n    ) -> ScheduleBlock:\n        obj_in_data = jsonable_encoder(obj_in)\n        if obj_in.start_time not in range(0, 23) or obj_in.end_time not in range(0, 23):\n            raise HTTPException(400, detail=\"Time data must be in 0~23\")\n        if obj_in.start_minute not in range(0, 59) or obj_in.end_minute not in range(\n            0, 59\n        ):\n            raise HTTPException(400, detail=\"Minute data must be in 0~59\")\n\n        if obj_in.day not in range(0, 6):\n            raise HTTPException(\n                400, detail=\"Day data must be in 0~6, 0: Sunday, 6: Saturday\"\n            )\n\n        db_obj = ScheduleBlock(id=create_uuid(), user_id=user_id, **obj_in_data)\n        db.add(db_obj)\n        db.commit()\n        db.refresh(db_obj)\n        return db_obj\n\n...\n````\n\n\n저희 코드에서 예시를 보면, 유저를 생성할때 전달해야 하는 인자는 유저 dto인데, 타임테이블을 생성할때는 타임테이블의 dto에 더해 유저 아이디를 따로 전달해야 하는 형태로 구현되어있었습니다.\n\n이렇게 적고 다시 보니 제 코드가 이상하게 구현된 것이 맞습니다.\n\n개발 과정에서는 당연히 다른 객체를 생성하니까 메소드의 형태가 다를 수 있다고 생각한 모양입니다. \n하지만, 특정 모델을 db에 생성하는 로직에서 특정 dto만 받기로 추상화되어 약속되어 있었는데 갑자기 다른 것을 달라고 하면 해당 메소드를 이용하는 개발자들은 헷갈릴 것입니다. 지금이야 저 혼자 개발하고 있지만 나중에 저는 고통받을 것이 뻔합니다.\n\n이런 관점에서, 반환하는 값에 대해서도 제한을 둔 LSP 철학이 이해가 되었습니다. 원래 생성한 이후에는 db에서 생성된 값을 dto 형식대로 반환해주기로 약속되어 있었습니다. 그런데 어떤 엔티티 형식에서는 뜬금없이 다른 형태로 반환해준다면 개발자는 별도 로직을 구현해야 할 것입니다.\n\n\n## 해결하기\n공식 문서에서는 타입 보장이 크게 필요없다면  `# type: ignore[override]` 를 통해 에러를 없앨 수 있다고 힙니다.\n다만 LSP에 대해서 알게 되었으니 LSP를 지키도록 아키텍쳐를 변경하고자 고민했습니다.\n\n지금 코드의 문제는, timetable을 생성하기 위해 사용하는 dto 외의 다른 값을 받아야 한다는 것이였습니다.\n\n**해결방법 후보**\n1. 슈퍼 클래스에서 사용하는 타입에 맞도록 데이터 타입 스키마를 수정하기\n2. 메소드를 무리하게 상속받지 않고 새로 만들어 사용하기\n\ndto 형식을 수정하는 것이 옳다고 생각했습니다. Timetable을 생성하기 위해서는 user_id가 필요하니 Timetable을 생성하기 위한 dto에 user_id를 포함하면 메소드를 상속받지 않아도 됩니다. \n문제는, 제가 개발해야 하는 타임테이블 생성 api는 user_id를 body로 받지 않고 비즈니스 로직단에서 입력해야 한다는 점이였습니다. \n\nFast API에서는 정의한 dto 스키마대로 api 명세와 문서를 자동으로 정의해줍니다. dto를 수정하면 API 명세가 바뀌기 떄문에 일단 메소드명을 수정하기로 했습니다. 결국 Api Endpoint를 개발하는 코드와 종속성이 생길 가능성이 생겼습니다. 클린 아키텍쳐를 지키기 위해 클린 아키텍쳐를 위반할 여지를 남겨두게 되었습니다.\n\n이렇게 개발하고 보니 전반적인 아키텍쳐가 잘못 설계된 점이 많다는 것을 느꼈습니다. 모를때는 편했는데 알게 되니 코드가 마음에 들지 않습니다. 처음부터 알았으면 좋았을텐데 구현에 집중하다보니 놓친 부분이였습니다.\n\n요즘 클린 아키텍쳐에 대한 필요성을 몸소 느끼고 있습니다. 전에 공부할때는 한번 쓱 훑고 넘겼는데 이제서야 머리에 쏙쏙 들어옵니다.\n\n모르는 것이 생겼다는 슬픔은 새롭게 알게되었다는 기쁨으로 넘기고 공부해야겠습니다.\n\n## 참고자료\n- [Common issues and solutions — Mypy 0.931 documentation](https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides)\n- [oop - What is an example of the Liskov Substitution Principle? - Stack Overflow](https://stackoverflow.com/questions/56860/what-is-an-example-of-the-liskov-substitution-principle)"},{"excerpt":"들어가며 사람은 항상 성장하려고 한다. 1년 전에는 잘 못했던 것을 지금 해내고 있는 자신을 볼 때가 있다. 지식은 단순히 수학공식이나 영어단어 같은 것을 말하지 않는다. 지식은 협상하기, 눈치보기, 회의 이끌기 같은 행동 양식과, 더 나아가서 본인 감정상태 다스리기, 진심으로 위로하기 같은 엄청나게 추상적인 암묵지도 포함한다. 나는 어떻게 성장했는가? …","fields":{"slug":"/성장의-단계/"},"frontmatter":{"date":"February 02, 2022","title":"성장의 단계","tags":["생각","짧은글","초안","성장"]},"rawMarkdownBody":"\n\n## 들어가며\n사람은 항상 성장하려고 한다. 1년 전에는 잘 못했던 것을 지금 해내고 있는 자신을 볼 때가 있다.\n\n지식은 단순히 수학공식이나 영어단어 같은 것을 말하지 않는다. 지식은 협상하기, 눈치보기, 회의 이끌기 같은 행동 양식과, 더 나아가서 본인 감정상태 다스리기, 진심으로 위로하기 같은 엄청나게 추상적인 암묵지도 포함한다.\n\n나는 어떻게 성장했는가? 사람은 어떻게 성장하는가? 성장의 단계에 대한 고찰을 공유해본다.\n\n## 성장의 단계\n- 모를 수 있다는 것을 인정하는 단계\n\t- 내가 모를수도 있다는 것을 인정해야 \"성장\"이라는 개념을 생각할 수 있다.\n\t- 나는 당연히 모든 것을 안다고 생각하는 사람에게 성장은 없다.\n- 모르는 것을 아는 단계\n\t- 내가 실제로 특정 지식을 모른다는 것을 아는 것이다. 무엇을 모르는지 알아야 성장할 수 있다.\n- 아는 방법을 배우는 단계\n\t- 내가 모르는 것을 어떻게 배워나갈지 아는 것이 중요하다. 내가 배울 지식이 책상에서 시간을 많이 쓰는 것일수도 있고, 체험과 도전으로 배워나가야 하는 지식, 사람을 만나야 하는 지식일 수 있다.\n- 지식을 아는 단계\n\t- 지식을 쌓아나가는 단계이다. 이 단계에서는 \"아는 척\"할 수 있다. 하지만 아직 쌓아둔 지식을 써먹어 본 적은 없다.\n- 지식을 실천하는 단계\n\t- 내가 아는 지식을 실제로 행동에 옮기는 상태이다. 이 단계에서 남들이 나를 보며 진짜 성장했다는 것을 느끼게 된다.\n\t- 이 단계에서 지식이 체화되기도 한다. 의도하지 않아도 모든 행동에서 내가 배우고 익힌 지식이 드러난다. 별다른 노력 없이도 지식을 써먹게 된다.\n- 지식을 전달하는 단계\n\t- 지식을 실천하다 보면 성장하면 내가 배운 경험을 남에게 전달할 수 있게 된다.\n- 지식을 실천하도록 하는 단계\n\t- 남이 내가 경험한 성장을 따라오게 하는 단계이다.\n\t- 모범\n\t\t- 모범이 필요하다. 내가 지식을 실천하지 않는데 남이 지식을 실천하기를 기대해서는 안 된다.\n\t- 본인 학습 방식에 대한, 타인 학습 단계 멘탈모델에 대한 인지\n\t\t- 상대방이 이 지식을 모를 때 어떤 눈높이에서 사고하는지 알아야 한다.\n\t\t- 내가 이 지식을 모를 때 어떻게 행동했는지, 나는 어떻게 이 지식을 얻고 체화하게 되었는지를 알아야 한다."},{"excerpt":"피드백이 자유로운 문화를 만들기 위해 실리콘밸리 조직문화가 유명해지며 솔직한 피드백을 통한 성장이 주요한 조직 성장 동력으로 주목받고 있다. 눈치보며 할 말 못하는 문화에 지겨운 요즘 사람들에게 아주 새롭고 신선한 시도록 보여지고 있다. 피드백이 있을때 숨김 없이 말할 수 있는 분위기를 만드는 것은 업무에 상당히 도움이 된다. 눈치보지 않고 드러난 일에만…","fields":{"slug":"/feedback-4a/"},"frontmatter":{"date":"February 01, 2022","title":"자유로운 피드백을 위한 원칙","tags":["조직","스크랩","독서"]},"rawMarkdownBody":"\n## 피드백이 자유로운 문화를 만들기 위해\n실리콘밸리 조직문화가 유명해지며 솔직한 피드백을 통한 성장이 주요한 조직 성장 동력으로 주목받고 있다. 눈치보며 할 말 못하는 문화에 지겨운 요즘 사람들에게 아주 새롭고 신선한 시도록 보여지고 있다.\n\n피드백이 있을때 숨김 없이 말할 수 있는 분위기를 만드는 것은 업무에 상당히 도움이 된다. 눈치보지 않고 드러난 일에만 집중할 수 있기 때문이다.\n\n하지만 고민없는 솔직한 피드백 문화 떄문에 가끔 어색한 광경을 목격하게 된다.\n기분 나쁜 피드백을 기분 나쁘게 듣지 말라는 식의 태도로는 서로 좋지 않은 효과만 불러일으킨다.\n\n피드백이 조직에 들어오기 위해서는 상상 이상의 노력과 훈련이 필요하다.\n미국인들의 문화가 원래 개방적이라 피드백이 통하는 것이 아니다. 그들도 수 많은 노력과 연구, 훈련이 뒷받침 되어있기 때문에 솔직한 피드백이 잘 작동할 수 있는 것이다.\n\n피드백은 원래 아프다는 사실까지는 모두가 안다. 그렇기에 조직의 성장 동력이 될 수 있는 것이다. 하지만 이 의미는 원래 아프니까 아파하는 사람에게 대고 마구 휘둘러도 된다는 것이 아니다. 피드백이 조직의 성장 동력이 되기 위해서는 \"피드백\"이 가진 기본 성질과 피드백을 하는 이유를 잊지 말고 잘 다루어야 한다.\n\n\n## 넷플릭스의 4A 피드백 문화 스크랩한 내용\n\n1. 도움을 주겠다는 생각으로 하라\n\t1. 불만을 표현하거나 상처를 주기 위해 말하는 솔직함은 절대 안 된다.\n\t2. 구체적으로 상대방에게 어떤 도움이 되는지를 납득시켜야 한다.\n\t3. 이 피드백이 내가 아니라 상대방에게 도움이 된다는 사실을 신경써서 말해라.\n2. 실질적인 조치를 포함하라\n\t1. 받는 사람이 행동에 어떻게 변화를 주어야 할지 정확히 말해라\n\t2. 잘못된 예) 발표를 그렇게 하면 사람들이 아무도 안들을겁니다.\n\t3. 옳은 예) 다른 팀 구성원이 있는 자리에서 발표할 때는 비전문가들 관점에서 사례를 들어가며 설명하면 다른 팀 분들에게도 의도가 잘 전달될 겁니다.\n3. 감사하라\n\t1. 사람은 비판을 받으면 본능적으로 방어하게 된다. 방어적인 마음이 드는 것이 잘못된 것이 아니다.\n\t2. 다만, 피드백 문화를 만들이 위해 조직 구성원들이 방어하지 않는 연습을 의도적으로 해야 한다.\n\t3. 어떻게 해야 상대방의 의견을 신중하게 듣고 감사할 수 있을까? 고민해야 한다.\n\t4. 상대방이 다시 부담없이 피드백을 할 수 있도록 표현해야 한다.\n4. 받아들이거나 거부하라\n\t1. 피드백을 주는 입장에서나 받는 입장에서나 피드백의 적용은 받는 사람의 선택에 달렸다는 것을 이해해야 한다.\n\t2. “왜 내가 피드백 했는데 안들어줘?” 또는 “쟤는 왜 내가 결정할 사항에 이래라 저래라야?” 하는 마음이 들면 안된다. 피드백을 받아들일지 말지는 피드백을 들은 사람에게 있다.\n\n(규칙없음 중에서)\n\n"},{"excerpt":"안녕하세요 블로그를 새롭게 세팅해보았습니다. 기술적인 내용이나 개인의 짧은 메모라도 가볍게 공유할 수 있는 블로그로 활용할 예정입니다.","fields":{"slug":"/hello-world/"},"frontmatter":{"date":"February 01, 2022","title":"안녕하세요.","tags":["짧은글"]},"rawMarkdownBody":"\n## 안녕하세요\n\n블로그를 새롭게 세팅해보았습니다.\n\n기술적인 내용이나 개인의 짧은 메모라도 가볍게 공유할 수 있는 블로그로 활용할 예정입니다."},{"excerpt":"미래에는 어떤 역량이 중요해질까? \"교육의 목적이 무엇인가?\" 라는 질문에 한참 빠져 있었다. 우리가 열심히 공부하는 긍국적인 이유는 무엇일지 알아야 몰입할 수 있다.\n지금 우리가 배우는 지식과 지금 우리가 익히는 역량은 진짜 필요한 역량일까? 스타트업 활동을 하며 생각난 미래에 필요한 역량을 메모해두었는데 이 자리에서 공유해본다. 미래 핵심 역량 제목을…","fields":{"slug":"/미래-핵심-역량/"},"frontmatter":{"date":"February 01, 2022","title":"미래 핵심 역량","tags":["생각","짧은글","초안"]},"rawMarkdownBody":"\n## 미래에는 어떤 역량이 중요해질까?\n\"교육의 목적이 무엇인가?\" 라는 질문에 한참 빠져 있었다. 우리가 열심히 공부하는 긍국적인 이유는 무엇일지 알아야 몰입할 수 있다.\n지금 우리가 배우는 지식과 지금 우리가 익히는 역량은 진짜 필요한 역량일까?\n\n스타트업 활동을 하며 생각난 미래에 필요한 역량을 메모해두었는데 이 자리에서 공유해본다.\n\n## 미래 핵심 역량\n\n### 제목을 작성하는 역량\n제목을 작성하기 위해서는 다양한 지식을 종합해 위에서 보는 역량이 있어야 한다. 남들이 보았을 때 어떤 내용이 있을지 한번에 알기 위해서는 제목이 중요하다. 좋은 제목을 작성하는 능력은 다른 사람의 사고방식과 현 시대의 페러다임을 이해하고 있어야 가질 수 있다.\n제목을 작성한다는 것은 주어진 정보들을 분류할 적절한 기준을 만들고, 스스로 만든 기준에 맞추어 분류할 수 있어야 한다.\n\n### 썰을 푸는 역량\n자신이 가진 지식을 남들과 함께 나누고 협력하는 것이 중요한 시대이다. 정보가 넘쳐다는 시대에 남들이 자신의 말을 듣게 하는 능력을 가져야 한다. 같은 내용이라도 몰입해서 듣게 만드는 역량이 주요 역량이 될 것이다.\n\n### 이해시키는 역량\n내가 가진 지식을 다른 사람에게 이해시키는 능력이다. 썰을 푸는 능력은 몰입시키는 능력이라면, 이해시키는 능력은 상대방이 나와 생각이 일치하도록 정보를 정확히 전달시키는 능력이다. 모두가 동일한 방식으로 이해하지 않는다. 상대방의 반응과 이해 정도를 실시간으로 파악하여 그에 맞는 방식으로 정보를 전달할 수 있어야 한다.\n\n### 다른 사람이 말하게 만드는 역량\n내 생각을 집중되도록 말하는 능력 못지 않게 남이 편하게 말하게 하는 능력도 중요하다. 상대방의 관심사와 상태를 캐치하여 다른 사람이 가진 생각과 정보를 공유하게 해주는 능력이야 말로 중요한 역량이다. 혼자 떠드는 것으로는 협력할 수 없다. 모두가 썰을 푸는 능력을 가지지 못했더라도 내 앞에서는 '썰을 푸는 능력'을 가질 수 있게 해주는 역량을 길러야 한다.\n\n### 메타인지\n내가 학습하기 위해서는 내가 무엇을 모르는지, 내 상태가 어떤 상태인지 인지할 필요가 있다. 내가 무엇을 모르는지를 넘어서 특정 분야에서 가장 최고 수준이 어느정도인지, 보통 수준이 어느정도인지, 내 위치는 어디인지, 나보다 못하는 수준의 사람들은 어떤 사고방식을 가지고 있는지 아는 것이 진정한 메타인지이다.\n\n### 검색 역량\n내가 모르는 지식을 가장 빠르게 얻는 능력이다. 검색 능력은 단순히 인터넷 검색만을 말하지 않는다. 얕게 알고 있는 지식들을 종합하여 내가 원하는 지식에 **스스로 접근**하는 전략을 세우는 능력이다. 이제는 지식을 누군가 정리하여 알려주지 않는다. 스스로 무엇을 모르는지 파악하고, 필요한 것을 판단하여 지식에  접근하는 역량이 필요하다."}]}},"pageContext":{}},"staticQueryHashes":[]}